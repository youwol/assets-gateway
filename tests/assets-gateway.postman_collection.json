{
  "info": {
    "_postman_id": "b9b8c5d3-45ac-46fe-8d9c-7de5410f8c2a",
    "name": "assets-gateway",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "data preparation",
      "item": [
        {
          "name": "log as test_account",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "var response_json = pm.response.json();\r",
                  "var token = response_json.access_token;\r",
                  "pm.collectionVariables.set('token', token);\r",
                  "\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "postman.setNextRequest(\"healthz\")"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "name": "Content-Type",
                "type": "text",
                "value": "application/x-www-form-urlencoded"
              }
            ],
            "body": {
              "mode": "urlencoded",
              "urlencoded": [
                {
                  "key": "username",
                  "value": "{{devUser}}",
                  "type": "text"
                },
                {
                  "key": "password",
                  "value": "{{password}}",
                  "type": "text"
                },
                {
                  "key": "client_id",
                  "value": "{{devClientId}}",
                  "type": "text"
                },
                {
                  "key": "grant_type",
                  "value": "password",
                  "type": "text"
                },
                {
                  "key": "client_secret",
                  "value": "{{devClientSecret}}",
                  "type": "text"
                }
              ]
            },
            "url": {
              "raw": "{{auth-url}}",
              "host": [
                "{{auth-url}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "userinfo",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"member of /youwol-users/postman-tester/\", function () {",
                  "    resp = pm.response.json()",
                  "    pm.expect(resp.memberof.filter( group => group.includes(\"/youwol-users/postman-tester/\")).length).to.be.above(0)",
                  "});",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{token}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "",
                "type": "text",
                "value": "",
                "disabled": true
              },
              {
                "key": "",
                "type": "text",
                "value": "",
                "disabled": true
              }
            ],
            "url": {
              "raw": "https://auth.youwol.com/auth/realms/youwol/protocol/openid-connect/userinfo",
              "protocol": "https",
              "host": [
                "auth",
                "youwol",
                "com"
              ],
              "path": [
                "auth",
                "realms",
                "youwol",
                "protocol",
                "openid-connect",
                "userinfo"
              ]
            }
          },
          "response": []
        },
        {
          "name": "healthz",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{host}}/api/assets-gateway/healthz",
              "host": [
                "{{host}}"
              ],
              "path": [
                "api",
                "assets-gateway",
                "healthz"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "organization",
      "item": [
        {
          "name": "user info",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"user has 'private' and '/youwol-users/postman-tester' groups\", function () {",
                  "    let respJson= pm.response.json()",
                  "    pm.expect(respJson).to.have.property('name');",
                  "    pm.expect(respJson).to.have.property('groups');",
                  "    pm.expect(respJson.groups.filter( p => p.path==\"private\").length).to.equal(1)",
                  "    pm.expect(respJson.groups.filter( p => p.path==\"/youwol-users/postman-tester\").length).to.equal(1)",
                  "    pm.expect(respJson.groups.filter( p => p.path==\"/youwol-users/youwol-devs\").length).to.equal(1)",
                  "",
                  "    youwolDevs = respJson.groups.find( p => p.path==\"/youwol-users/youwol-devs\")",
                  "    pm.collectionVariables.set(\"abb#youwol-devs-group\", youwolDevs.id)",
                  "    youwolUsers = respJson.groups.find( p => p.path==\"/youwol-users\")",
                  "    pm.collectionVariables.set(\"abb#youwol-group\", youwolUsers.id)",
                  "});",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "description": "bearer token",
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{token}}"
              }
            ],
            "url": {
              "raw": "{{host}}/api/assets-gateway/user-info",
              "host": [
                "{{host}}"
              ],
              "path": [
                "api",
                "assets-gateway",
                "user-info"
              ]
            }
          },
          "response": []
        },
        {
          "name": "groups",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"user has 'private' and '/youwol-users/postman-tester' groups\", function () {",
                  "    let respJson= pm.response.json()",
                  "    pm.expect(respJson).to.have.property('groups');",
                  "    pm.expect(respJson.groups.filter( p => p.path==\"private\").length).to.equal(1)",
                  "    pm.expect(respJson.groups.filter( p => p.path==\"/youwol-users/postman-tester\").length).to.equal(1)",
                  "    pm.expect(respJson.groups.filter( p => p.path==\"/youwol-users/postman-tester/subchildtest1\").length).to.equal(1)",
                  "",
                  "    pm.collectionVariables.set('abb#postman_group',respJson.groups.find( p => p.path==\"/youwol-users/postman-tester\").id)",
                  "    pm.collectionVariables.set('abb#postman_child_group',respJson.groups.find( p => p.path==\"/youwol-users/postman-tester/subchildtest1\").id)",
                  "    pm.collectionVariables.set('abb#public_group',respJson.groups.find( p => p.path==\"/youwol-users\").id)",
                  "});",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "description": "bearer token",
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{token}}"
              }
            ],
            "url": {
              "raw": "{{host}}/api/assets-gateway/groups",
              "host": [
                "{{host}}"
              ],
              "path": [
                "api",
                "assets-gateway",
                "groups"
              ]
            }
          },
          "response": []
        },
        {
          "name": "drives",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"user has 'private' and '/youwol-users/postman-tester' groups\", function () {",
                  "    let respJson= pm.response.json()",
                  "    pm.expect(respJson).to.have.property('drives');",
                  "});",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "description": "bearer token",
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{token}}"
              }
            ],
            "url": {
              "raw": "{{host}}/api/assets-gateway/tree/groups/{{abb#postman_group}}/drives",
              "host": [
                "{{host}}"
              ],
              "path": [
                "api",
                "assets-gateway",
                "tree",
                "groups",
                "{{abb#postman_group}}",
                "drives"
              ]
            }
          },
          "response": []
        },
        {
          "name": "post drive",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"response contains expected attributes\", function () {",
                  "    ",
                  "    let respJson= pm.response.json()",
                  "    pm.expect(respJson).to.have.property('driveId');",
                  "    pm.expect(respJson).to.have.property('name');",
                  "    pm.collectionVariables.set('abb#driveId', respJson.driveId)",
                  "})",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "description": "bearer token",
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"abb#data\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/api/assets-gateway/tree/groups/{{abb#postman_group}}/drives",
              "host": [
                "{{host}}"
              ],
              "path": [
                "api",
                "assets-gateway",
                "tree",
                "groups",
                "{{abb#postman_group}}",
                "drives"
              ]
            }
          },
          "response": []
        },
        {
          "name": "items",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"drive do not contains children\", function () {",
                  "    let respJson= pm.response.json()",
                  "    pm.expect(respJson).to.have.property('items');",
                  "    pm.expect(respJson).to.have.property('folders');",
                  "    pm.expect(respJson.items.length).to.eq(0)",
                  "    pm.expect(respJson.folders.length).to.eq(0)",
                  "});",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "description": "bearer token",
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{token}}"
              }
            ],
            "url": {
              "raw": "{{host}}/api/assets-gateway/tree/folders/{{abb#driveId}}/children",
              "host": [
                "{{host}}"
              ],
              "path": [
                "api",
                "assets-gateway",
                "tree",
                "folders",
                "{{abb#driveId}}",
                "children"
              ]
            }
          },
          "response": []
        },
        {
          "name": "create folder 'a'",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"response contains expected attributes\", function () {",
                  "    ",
                  "    let respJson= pm.response.json()",
                  "    pm.expect(respJson).to.have.property('name');",
                  "    pm.expect(respJson).to.have.property('folderId');",
                  "    pm.expect(respJson).to.have.property('parentFolderId');",
                  "    pm.expect(respJson.parentFolderId).to.eq(pm.collectionVariables.get(\"abb#driveId\"))",
                  "    pm.collectionVariables.set('abb#folderId', respJson.folderId)",
                  "})",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "description": "bearer token",
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"a\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/api/assets-gateway/tree/folders/{{abb#driveId}}",
              "host": [
                "{{host}}"
              ],
              "path": [
                "api",
                "assets-gateway",
                "tree",
                "folders",
                "{{abb#driveId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "items",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"drive do not contains children\", function () {",
                  "    let respJson= pm.response.json()",
                  "    pm.expect(respJson).to.have.property('items');",
                  "    pm.expect(respJson).to.have.property('folders');",
                  "    pm.expect(respJson.items.length).to.eq(0)",
                  "    pm.expect(respJson.folders.length).to.eq(1)",
                  "});",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "description": "bearer token",
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{token}}"
              }
            ],
            "url": {
              "raw": "{{host}}/api/assets-gateway/tree/folders/{{abb#driveId}}/children",
              "host": [
                "{{host}}"
              ],
              "path": [
                "api",
                "assets-gateway",
                "tree",
                "folders",
                "{{abb#driveId}}",
                "children"
              ]
            }
          },
          "response": []
        },
        {
          "name": "update folder 'a'",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"response contains expected attributes\", function () {",
                  "    ",
                  "    let respJson= pm.response.json()",
                  "    pm.expect(respJson).to.have.property('name');",
                  "    pm.expect(respJson).to.have.property('folderId');",
                  "    pm.expect(respJson).to.have.property('parentFolderId');",
                  "    pm.expect(respJson.parentFolderId).to.eq(pm.collectionVariables.get(\"abb#driveId\"))",
                  "    pm.collectionVariables.set('abb#folderId', respJson.folderId)",
                  "})",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "description": "bearer token",
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"a renamed\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/api/assets-gateway/tree/folders/{{abb#folderId}}",
              "host": [
                "{{host}}"
              ],
              "path": [
                "api",
                "assets-gateway",
                "tree",
                "folders",
                "{{abb#folderId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "items",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"drive do not contains children\", function () {",
                  "    let respJson= pm.response.json()",
                  "    pm.expect(respJson).to.have.property('items');",
                  "    pm.expect(respJson).to.have.property('folders');",
                  "    pm.expect(respJson.items.length).to.eq(0)",
                  "    pm.expect(respJson.folders.length).to.eq(1)",
                  "    pm.expect(respJson.folders[0].name).to.eq('a renamed')",
                  "});",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "description": "bearer token",
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{token}}"
              }
            ],
            "url": {
              "raw": "{{host}}/api/assets-gateway/tree/folders/{{abb#driveId}}/children",
              "host": [
                "{{host}}"
              ],
              "path": [
                "api",
                "assets-gateway",
                "tree",
                "folders",
                "{{abb#driveId}}",
                "children"
              ]
            }
          },
          "response": []
        },
        {
          "name": "delete folder 'a'",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "description": "bearer token",
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"a\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/api/assets-gateway/tree/folders/{{abb#folderId}}",
              "host": [
                "{{host}}"
              ],
              "path": [
                "api",
                "assets-gateway",
                "tree",
                "folders",
                "{{abb#folderId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "items",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"drive do not contains children\", function () {",
                  "    let respJson= pm.response.json()",
                  "    pm.expect(respJson).to.have.property('items');",
                  "    pm.expect(respJson).to.have.property('folders');",
                  "    pm.expect(respJson.items.length).to.eq(0)",
                  "    pm.expect(respJson.folders.length).to.eq(0)",
                  "});",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "description": "bearer token",
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{token}}"
              }
            ],
            "url": {
              "raw": "{{host}}/api/assets-gateway/tree/folders/{{abb#driveId}}/children",
              "host": [
                "{{host}}"
              ],
              "path": [
                "api",
                "assets-gateway",
                "tree",
                "folders",
                "{{abb#driveId}}",
                "children"
              ]
            }
          },
          "response": []
        },
        {
          "name": "list deleted",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"entities\", function () {",
                  "    let respJson= pm.response.json()",
                  "    pm.expect(respJson).to.have.property('folders');",
                  "    pm.expect(respJson.folders.length).to.eq(1)",
                  "});",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "description": "bearer token",
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{token}}"
              }
            ],
            "url": {
              "raw": "{{host}}/api/assets-gateway/tree/drives/{{abb#driveId}}/deleted",
              "host": [
                "{{host}}"
              ],
              "path": [
                "api",
                "assets-gateway",
                "tree",
                "drives",
                "{{abb#driveId}}",
                "deleted"
              ]
            }
          },
          "response": []
        },
        {
          "name": "purge drive",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"4 folders deleted, 13 items deleted\", function () {",
                  "    ",
                  "    let respJson= pm.response.json()",
                  "    pm.expect(respJson).to.have.property('foldersCount');",
                  "    pm.expect(respJson).to.have.property('itemsCount');",
                  "    pm.expect(respJson.foldersCount).to.equal(1)",
                  "    pm.expect(respJson.itemsCount).to.equal(0)",
                  "    pm.expect(respJson).to.have.property('items');",
                  "    pm.expect(respJson.items.length).to.eq(respJson.itemsCount);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "description": "bearer token",
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{token}}"
              }
            ],
            "url": {
              "raw": "{{host}}/api/assets-gateway/tree/drives/{{abb#driveId}}/purge",
              "host": [
                "{{host}}"
              ],
              "path": [
                "api",
                "assets-gateway",
                "tree",
                "drives",
                "{{abb#driveId}}",
                "purge"
              ]
            }
          },
          "response": []
        },
        {
          "name": "update drive",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"response contains expected attributes\", function () {",
                  "    ",
                  "    let respJson= pm.response.json()",
                  "    pm.expect(respJson).to.have.property('driveId');",
                  "    pm.expect(respJson).to.have.property('name');",
                  "    pm.collectionVariables.set('abb#driveId', respJson.driveId)",
                  "})",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "description": "bearer token",
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"abb#data2\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/api/assets-gateway/tree/drives/{{abb#driveId}}",
              "host": [
                "{{host}}"
              ],
              "path": [
                "api",
                "assets-gateway",
                "tree",
                "drives",
                "{{abb#driveId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "drives",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"user has 'private' and '/youwol-users/postman-tester' groups\", function () {",
                  "    let respJson= pm.response.json()",
                  "    pm.expect(respJson).to.have.property('drives');",
                  "    pm.expect(respJson.drives.filter(d => d.driveId== pm.collectionVariables.get(\"abb#driveId\")).length).to.eq(1);",
                  "});",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "description": "bearer token",
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{token}}"
              }
            ],
            "url": {
              "raw": "{{host}}/api/assets-gateway/tree/groups/{{abb#postman_group}}/drives",
              "host": [
                "{{host}}"
              ],
              "path": [
                "api",
                "assets-gateway",
                "tree",
                "groups",
                "{{abb#postman_group}}",
                "drives"
              ]
            }
          },
          "response": []
        },
        {
          "name": "list deleted",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"entities\", function () {",
                  "    let respJson= pm.response.json()",
                  "    pm.expect(respJson).to.have.property('folders');",
                  "    pm.expect(respJson.folders.length).to.eq(0)",
                  "    pm.expect(respJson).to.have.property('items');",
                  "    pm.expect(respJson.items.length).to.eq(0)",
                  "});",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "description": "bearer token",
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{token}}"
              }
            ],
            "url": {
              "raw": "{{host}}/api/assets-gateway/tree/drives/{{abb#driveId}}/deleted",
              "host": [
                "{{host}}"
              ],
              "path": [
                "api",
                "assets-gateway",
                "tree",
                "drives",
                "{{abb#driveId}}",
                "deleted"
              ]
            }
          },
          "response": []
        },
        {
          "name": "delete drive",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "description": "bearer token",
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"a\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/api/assets-gateway/tree/drives/{{abb#driveId}}",
              "host": [
                "{{host}}"
              ],
              "path": [
                "api",
                "assets-gateway",
                "tree",
                "drives",
                "{{abb#driveId}}"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "flux-project",
      "item": [
        {
          "name": "new project",
          "item": [
            {
              "name": "post drive",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"response contains expected attributes\", function () {",
                      "    ",
                      "    let respJson= pm.response.json()",
                      "    pm.expect(respJson).to.have.property('driveId');",
                      "    pm.expect(respJson).to.have.property('name');",
                      "    pm.collectionVariables.set('abb#flux#new_project#driveId', respJson.driveId)",
                      "})",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "description": "bearer token",
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{token}}"
                  },
                  {
                    "key": "user-name",
                    "value": "test",
                    "description": "Used only in full-local conf.",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"name\": \"abb#flux#new-project\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/api/assets-gateway/tree/groups/{{abb#postman_group}}/drives",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "api",
                    "assets-gateway",
                    "tree",
                    "groups",
                    "{{abb#postman_group}}",
                    "drives"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "create folder",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"response contains expected attributes\", function () {",
                      "    ",
                      "    let respJson= pm.response.json()",
                      "    pm.expect(respJson).to.have.property('name');",
                      "    pm.expect(respJson).to.have.property('folderId');",
                      "    pm.expect(respJson).to.have.property('parentFolderId');",
                      "    pm.collectionVariables.set('abb#flux#new_project#folderId', respJson.folderId)",
                      "})",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "description": "bearer token",
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{token}}"
                  },
                  {
                    "key": "user-name",
                    "value": "test",
                    "description": "Used only in full-local conf.",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"name\": \"fluxNew\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/api/assets-gateway/tree/folders/{{abb#flux#new_project#driveId}}",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "api",
                    "assets-gateway",
                    "tree",
                    "folders",
                    "{{abb#flux#new_project#driveId}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "create_project",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"flux project located in expected drive/folder and of type 'flux-project'\", function () {",
                      "    ",
                      "    let respJson= pm.response.json()",
                      "    pm.expect(respJson).to.have.property('assetId');",
                      "    pm.expect(respJson).to.have.property('rawId');",
                      "    pm.expect(respJson).to.have.property('kind');",
                      "    pm.expect(respJson).to.have.property('groupId');",
                      "    pm.expect(respJson.kind).to.eq('flux-project')",
                      "    ",
                      "    pm.collectionVariables.set('abb#flux#new_project#AssetId', respJson.assetId)",
                      "    pm.collectionVariables.set('abb#flux#new_project#fluxProjectId', respJson.rawId)",
                      "    pm.collectionVariables.set('abb#flux#new_project#fluxName', respJson.name)",
                      "})",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}",
                    "description": "bearer token",
                    "type": "text"
                  },
                  {
                    "key": "user-name",
                    "value": "test",
                    "description": "Used only in full-local conf.",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{host}}/api/assets-gateway/assets/flux-project/location/{{abb#flux#new_project#folderId}}",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "api",
                    "assets-gateway",
                    "assets",
                    "flux-project",
                    "location",
                    "{{abb#flux#new_project#folderId}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "get flux project content",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"flux project located in expected drive/folder and of type 'flux-project'\", function () {",
                      "    ",
                      "    let respJson= pm.response.json()",
                      "    pm.expect(respJson).to.have.property('name');",
                      "    pm.expect(respJson).to.have.property('requirements');",
                      "    pm.expect(respJson).to.have.property('workflow');",
                      "    pm.expect(respJson).to.have.property('builderRendering');",
                      "    pm.expect(respJson).to.have.property('runnerRendering');",
                      "    pm.expect(respJson.name).to.eq(pm.collectionVariables.get(\"abb#flux#new_project#fluxName\"));",
                      "})",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "description": "bearer token",
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{token}}"
                  },
                  {
                    "key": "user-name",
                    "value": "test",
                    "description": "Used only in full-local conf.",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{host}}/api/assets-gateway/raw/flux-project/{{abb#flux#new_project#fluxProjectId}}",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "api",
                    "assets-gateway",
                    "raw",
                    "flux-project",
                    "{{abb#flux#new_project#fluxProjectId}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "get flux project metadata via flux-backend",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"flux project located in expected drive/folder and of type 'flux-project'\", function () {",
                      "    ",
                      "    let respJson= pm.response.json()",
                      "    pm.expect(respJson).to.have.property('id');",
                      "    pm.expect(respJson).to.have.property('name');",
                      "    pm.expect(respJson).to.have.property('fluxPacks');",
                      "    pm.expect(respJson.id).to.eq(pm.collectionVariables.get(\"abb#flux#new_project#fluxProjectId\"));",
                      "    pm.expect(respJson.name).to.eq(pm.collectionVariables.get(\"abb#flux#new_project#fluxName\"));",
                      "})",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "description": "bearer token",
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{token}}"
                  },
                  {
                    "key": "user-name",
                    "value": "test",
                    "description": "Used only in full-local conf.",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{host}}/api/flux-backend/projects/{{abb#flux#new_project#fluxProjectId}}/metadata",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "api",
                    "flux-backend",
                    "projects",
                    "{{abb#flux#new_project#fluxProjectId}}",
                    "metadata"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "get flux asset by assetId",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"flux project located in expected drive/folder and of type 'flux-project'\", function () {",
                      "    ",
                      "    let respJson= pm.response.json()",
                      "    pm.expect(respJson).to.have.property('assetId');",
                      "    pm.expect(respJson).to.have.property('kind');",
                      "    pm.expect(respJson).to.have.property('rawId');",
                      "    pm.expect(respJson).to.have.property('name');",
                      "    pm.expect(respJson.assetId).to.eq(pm.collectionVariables.get(\"abb#flux#new_project#AssetId\"));",
                      "    pm.expect(respJson.rawId).to.eq(pm.collectionVariables.get(\"abb#flux#new_project#fluxProjectId\"));",
                      "    pm.expect(respJson.groupId).to.eq(pm.collectionVariables.get(\"abb#postman_group\"));",
                      "    pm.expect(respJson.name).to.eq(pm.collectionVariables.get(\"abb#flux#new_project#fluxName\"));",
                      "})",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "description": "bearer token",
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{token}}"
                  },
                  {
                    "key": "user-name",
                    "value": "test",
                    "description": "Used only in full-local conf.",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{host}}/api/assets-gateway/assets/{{abb#flux#new_project#AssetId}}",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "api",
                    "assets-gateway",
                    "assets",
                    "{{abb#flux#new_project#AssetId}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "get tree items",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"flux project located in expected drive/folder and of type 'flux-project'\", function () {",
                      "    ",
                      "    let respJson= pm.response.json()",
                      "    pm.expect(respJson).to.have.property('items');",
                      "    pm.expect(respJson.items.length).to.eq(1);",
                      "    let item = respJson.items[0]",
                      "    pm.expect(item).to.have.property(\"treeId\")",
                      "    pm.expect(item).to.have.property(\"folderId\")",
                      "    pm.expect(item).to.have.property(\"rawId\")",
                      "    pm.expect(item).to.have.property(\"assetId\")",
                      "    pm.expect(item).to.have.property(\"groupId\")",
                      "    pm.expect(item).to.have.property(\"name\")",
                      "    pm.expect(item).to.have.property(\"kind\")",
                      "    pm.expect(item).to.have.property(\"borrowed\")",
                      "    pm.expect(item.kind).to.eq(\"flux-project\")",
                      "    pm.expect(item.assetId).to.eq(pm.collectionVariables.get(\"abb#flux#new_project#AssetId\"));",
                      "    pm.expect(item.rawId).to.eq(pm.collectionVariables.get(\"abb#flux#new_project#fluxProjectId\"));",
                      "    pm.expect(item.borrowed).to.eq(false);",
                      "})",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "description": "bearer token",
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{token}}"
                  },
                  {
                    "key": "user-name",
                    "value": "test",
                    "description": "Used only in full-local conf.",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{host}}/api/assets-gateway/tree/folders/{{abb#flux#new_project#folderId}}/children",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "api",
                    "assets-gateway",
                    "tree",
                    "folders",
                    "{{abb#flux#new_project#folderId}}",
                    "children"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "query assets",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"get the new flux project created\", function () {",
                      "    ",
                      "    let respJson= pm.response.json()",
                      "    pm.expect(respJson).to.have.property('assets');",
                      "    pm.expect(respJson.assets.length).to.eq(1);",
                      "    let asset = respJson.assets[0]",
                      "    pm.expect(asset.assetId).to.eq(pm.collectionVariables.get(\"abb#flux#new_project#AssetId\"));",
                      "    pm.expect(asset.kind).to.eq(\"flux-project\");",
                      "    pm.expect(asset.name).to.eq(\"new flux-project\");",
                      "    pm.expect(asset.rawId).to.eq(pm.collectionVariables.get(\"abb#flux#new_project#fluxProjectId\"));",
                      "})",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "description": "bearer token",
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{token}}"
                  },
                  {
                    "key": "user-name",
                    "value": "test",
                    "description": "Used only in full-local conf.",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"groupId\":\"{{abb#postman_group}}\",\n    \"driveId\":\"{{abb#flux#new_project#driveId}}\",\n    \"folderId\":\"{{abb#flux#new_project#folderId}}\",\n    \"recursive\":false,\n    \"fluxProject\":true,\n    \"queryStr\":\"\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/api/assets-gateway/assets/query-tree",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "api",
                    "assets-gateway",
                    "assets",
                    "query-tree"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "delete folder",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "DELETE",
                "header": [
                  {
                    "description": "bearer token",
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{token}}"
                  },
                  {
                    "key": "user-name",
                    "value": "test",
                    "description": "Used only in full-local conf.",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{host}}/api/assets-gateway/tree/folders/{{abb#flux#new_project#folderId}}",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "api",
                    "assets-gateway",
                    "tree",
                    "folders",
                    "{{abb#flux#new_project#folderId}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "purge drive",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"1 folders deleted, 1 items deleted\", function () {",
                      "    ",
                      "    let respJson= pm.response.json()",
                      "    pm.expect(respJson).to.have.property('foldersCount');",
                      "    pm.expect(respJson).to.have.property('itemsCount');",
                      "    pm.expect(respJson.foldersCount).to.equal(1)",
                      "    pm.expect(respJson.itemsCount).to.equal(1)",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "DELETE",
                "header": [
                  {
                    "description": "bearer token",
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{token}}"
                  },
                  {
                    "key": "user-name",
                    "value": "test",
                    "description": "Used only in full-local conf.",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{host}}/api/assets-gateway/tree/drives/{{abb#flux#new_project#driveId}}/purge",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "api",
                    "assets-gateway",
                    "tree",
                    "drives",
                    "{{abb#flux#new_project#driveId}}",
                    "purge"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "delete drive",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "DELETE",
                "header": [
                  {
                    "description": "bearer token",
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{token}}"
                  },
                  {
                    "key": "user-name",
                    "value": "test",
                    "description": "Used only in full-local conf.",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"name\": \"a\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/api/assets-gateway/tree/drives/{{abb#flux#new_project#driveId}}",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "api",
                    "assets-gateway",
                    "tree",
                    "drives",
                    "{{abb#flux#new_project#driveId}}"
                  ]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "from dandling project in child group",
          "item": [
            {
              "name": "post drive #postman_childgroup",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"response contains expected attributes\", function () {",
                      "    ",
                      "    let respJson= pm.response.json()",
                      "    pm.expect(respJson).to.have.property('driveId');",
                      "    pm.expect(respJson).to.have.property('name');",
                      "    pm.collectionVariables.set('abb#flux#from_dandling#driveId', respJson.driveId)",
                      "})",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "description": "bearer token",
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{token}}"
                  },
                  {
                    "key": "user-name",
                    "value": "test",
                    "description": "Used only in full-local conf.",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"name\": \"abb#flux#from_dandling\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/api/assets-gateway/tree/groups/{{abb#postman_child_group}}/drives",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "api",
                    "assets-gateway",
                    "tree",
                    "groups",
                    "{{abb#postman_child_group}}",
                    "drives"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "create folder 'fluxImport'",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"response contains expected attributes\", function () {",
                      "    ",
                      "    let respJson= pm.response.json()",
                      "    pm.expect(respJson).to.have.property('name');",
                      "    pm.expect(respJson).to.have.property('folderId');",
                      "    pm.expect(respJson).to.have.property('parentFolderId');",
                      "    pm.collectionVariables.set('abb#flux#from_dandling#folderId', respJson.folderId)",
                      "})",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "description": "bearer token",
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{token}}"
                  },
                  {
                    "key": "user-name",
                    "value": "test",
                    "description": "Used only in full-local conf.",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"name\": \"fluxImport\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/api/assets-gateway/tree/folders/{{abb#flux#from_dandling#driveId}}",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "api",
                    "assets-gateway",
                    "tree",
                    "folders",
                    "{{abb#flux#from_dandling#driveId}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "create dandling project in \"/youwol-users/postman-tester\"",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"flux project located in expected drive/folder and of type 'flux-project'\", function () {",
                      "    ",
                      "    let respJson= pm.response.json()",
                      "    pm.expect(respJson).to.have.property('projectId');",
                      "",
                      "    pm.collectionVariables.set('abb#flux#from_dandling#projectId', respJson.projectId)",
                      "})",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "description": "bearer token",
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{token}}"
                  },
                  {
                    "key": "user-name",
                    "value": "test",
                    "description": "Used only in full-local conf.",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"name\": \"dandling-project\",\n\t\"description\" : \"\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/api/flux-backend/projects/create",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "api",
                    "flux-backend",
                    "projects",
                    "create"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "get flux project metadata",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"flux project located in expected drive/folder and of type 'flux-project'\", function () {",
                      "    ",
                      "    let respJson= pm.response.json()",
                      "    pm.expect(respJson).to.have.property('id');",
                      "    pm.expect(respJson).to.have.property('name');",
                      "    pm.expect(respJson).to.have.property('fluxPacks');",
                      "    pm.expect(respJson.id).to.eq(pm.collectionVariables.get(\"abb#flux#from_dandling#projectId\"));",
                      "})",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "description": "bearer token",
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{token}}"
                  },
                  {
                    "key": "user-name",
                    "value": "test",
                    "description": "Used only in full-local conf.",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{host}}/api/flux-backend/projects/{{abb#flux#from_dandling#projectId}}/metadata",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "api",
                    "flux-backend",
                    "projects",
                    "{{abb#flux#from_dandling#projectId}}",
                    "metadata"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "register in assets",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Initial asset created returned\", function () {",
                      "    let respJson= pm.response.json()",
                      "    pm.expect(respJson).to.have.property('relatedId');",
                      "    pm.expect(respJson).to.have.property('assetId');",
                      "    pm.expect(respJson).to.have.property('name');",
                      "    pm.expect(respJson).to.have.property('images');",
                      "    pm.expect(respJson).to.have.property('thumbnails');",
                      "    pm.expect(respJson).to.have.property('tags');",
                      "    pm.expect(respJson).to.have.property('description');",
                      "    pm.expect(respJson).to.have.property('groupId');",
                      "",
                      "    pm.expect(respJson.relatedId).to.equal(pm.collectionVariables.get(\"abb#flux#from_dandling#projectId\"))",
                      "    pm.collectionVariables.set(\"abb#flux#from_dandling#assetId\",respJson.assetId)",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  },
                  {
                    "description": "bearer token",
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{token}}"
                  },
                  {
                    "key": "user-name",
                    "value": "test",
                    "description": "Used only in full-local conf.",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"relatedId\": \"{{abb#flux#from_dandling#projectId}}\",\n    \"kind\": \"flux-project\",\n    \"groupId\": \"{{abb#postman_child_group}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/api/assets-backend/assets",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "api",
                    "assets-backend",
                    "assets"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "import dandling project in \"/youwol-users/postman-tester/subchildtest1\"",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "",
                      "pm.test(\"retrieve expected attributes\", function () {",
                      "    ",
                      "    let respJson= pm.response.json()",
                      "    pm.expect(respJson).to.have.property('items');",
                      "    pm.expect(respJson.items.length).to.eq(1);",
                      "    let item = respJson.items[0]",
                      "    pm.expect(item).to.have.property('treeId')",
                      "    pm.expect(item).to.have.property('folderId')",
                      "    pm.expect(item).to.have.property('kind')",
                      "    pm.expect(item).to.have.property('assetId')",
                      "    pm.expect(item).to.have.property('rawId')",
                      "    pm.expect(item).to.have.property('borrowed')",
                      "",
                      "    pm.expect(item.assetId).to.eq(pm.collectionVariables.get(\"abb#flux#from_dandling#assetId\"))",
                      "    pm.expect(item.rawId).to.eq(pm.collectionVariables.get(\"abb#flux#from_dandling#projectId\"))",
                      "    pm.expect(item.borrowed).to.eq(false)",
                      "    pm.expect(item.kind).to.eq(\"flux-project\")",
                      "    // pm.expect(item.name).to.eq(\"dandling-project\")",
                      "",
                      "})",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  },
                  {
                    "description": "bearer token",
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{token}}"
                  },
                  {
                    "key": "user-name",
                    "value": "test",
                    "description": "Used only in full-local conf.",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"folderId\": \"{{abb#flux#from_dandling#folderId}}\",\n    \"assetIds\": [\"{{abb#flux#from_dandling#assetId}}\"]\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/api/assets-gateway/assets/register-in-tree",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "api",
                    "assets-gateway",
                    "assets",
                    "register-in-tree"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "get flux project metadata",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"flux project located in expected drive/folder and of type 'flux-project'\", function () {",
                      "    ",
                      "    let respJson= pm.response.json()",
                      "    pm.expect(respJson).to.have.property('id');",
                      "    pm.expect(respJson).to.have.property('name');",
                      "    pm.expect(respJson).to.have.property('fluxPacks');",
                      "    pm.expect(respJson.id).to.eq(pm.collectionVariables.get(\"abb#flux#from_dandling#projectId\"));",
                      "})",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "description": "bearer token",
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{token}}"
                  },
                  {
                    "key": "user-name",
                    "value": "test",
                    "description": "Used only in full-local conf.",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{host}}/api/flux-backend/projects/{{abb#flux#from_dandling#projectId}}/metadata",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "api",
                    "flux-backend",
                    "projects",
                    "{{abb#flux#from_dandling#projectId}}",
                    "metadata"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "get flux asset",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"make sure scope has been updated\", function () {",
                      "    ",
                      "    let respJson= pm.response.json()",
                      "    pm.expect(respJson).to.have.property('assetId');",
                      "    pm.expect(respJson).to.have.property('kind');",
                      "    pm.expect(respJson).to.have.property('relatedId');",
                      "    pm.expect(respJson).to.have.property('name');",
                      "})",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "description": "bearer token",
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{token}}"
                  },
                  {
                    "key": "user-name",
                    "value": "test",
                    "description": "Used only in full-local conf.",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{host}}/api/assets-backend/assets/{{abb#flux#from_dandling#assetId}}",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "api",
                    "assets-backend",
                    "assets",
                    "{{abb#flux#from_dandling#assetId}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "get tree items",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"flux project located in expected drive/folder and of type 'flux-project'\", function () {",
                      "    ",
                      "    let respJson= pm.response.json()",
                      "    pm.expect(respJson).to.have.property('items');",
                      "    pm.expect(respJson.items.length).to.eq(1);",
                      "    let metadata = JSON.parse(respJson.items[0].metadata)",
                      "    pm.expect(metadata.assetId).to.eq(pm.collectionVariables.get(\"abb#flux#from_dandling#assetId\"));",
                      "    pm.expect(metadata.relatedId).to.eq(pm.collectionVariables.get(\"abb#flux#from_dandling#projectId\"));",
                      "    pm.expect(metadata.borrowed).to.eq(false);",
                      "})",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "description": "bearer token",
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{token}}"
                  },
                  {
                    "key": "user-name",
                    "value": "test",
                    "description": "Used only in full-local conf.",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{host}}/api/treedb-backend/folders/{{abb#flux#from_dandling#folderId}}/children",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "api",
                    "treedb-backend",
                    "folders",
                    "{{abb#flux#from_dandling#folderId}}",
                    "children"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "delete folder",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "DELETE",
                "header": [
                  {
                    "description": "bearer token",
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{token}}"
                  },
                  {
                    "key": "user-name",
                    "value": "test",
                    "description": "Used only in full-local conf.",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"name\": \"a\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/api/assets-gateway/tree/folders/{{abb#flux#from_dandling#folderId}}",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "api",
                    "assets-gateway",
                    "tree",
                    "folders",
                    "{{abb#flux#from_dandling#folderId}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "purge drive",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"1 folder deleted, 1 item deleted\", function () {",
                      "    ",
                      "    let respJson= pm.response.json()",
                      "    pm.expect(respJson).to.have.property('foldersCount');",
                      "    pm.expect(respJson).to.have.property('itemsCount');",
                      "    pm.expect(respJson.foldersCount).to.equal(1)",
                      "    pm.expect(respJson.itemsCount).to.equal(1)",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "DELETE",
                "header": [
                  {
                    "description": "bearer token",
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{token}}"
                  },
                  {
                    "key": "user-name",
                    "value": "test",
                    "description": "Used only in full-local conf.",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{host}}/api/assets-gateway/tree/drives/{{abb#flux#from_dandling#driveId}}/purge",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "api",
                    "assets-gateway",
                    "tree",
                    "drives",
                    "{{abb#flux#from_dandling#driveId}}",
                    "purge"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "delete drive",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "DELETE",
                "header": [
                  {
                    "description": "bearer token",
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{token}}"
                  },
                  {
                    "key": "user-name",
                    "value": "test",
                    "description": "Used only in full-local conf.",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"name\": \"a\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/api/assets-gateway/tree/drives/{{abb#flux#from_dandling#driveId}}",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "api",
                    "assets-gateway",
                    "tree",
                    "drives",
                    "{{abb#flux#from_dandling#driveId}}"
                  ]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "updates",
          "item": [
            {
              "name": "post drive",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"response contains expected attributes\", function () {",
                      "    ",
                      "    let respJson= pm.response.json()",
                      "    pm.expect(respJson).to.have.property('driveId');",
                      "    pm.expect(respJson).to.have.property('name');",
                      "    pm.collectionVariables.set('abb#flux#updates#driveId', respJson.driveId)",
                      "})",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "description": "bearer token",
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{token}}"
                  },
                  {
                    "key": "user-name",
                    "value": "test",
                    "description": "Used only in full-local conf.",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"name\": \"abb#flux#updates\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/api/assets-gateway/tree/groups/{{abb#postman_group}}/drives",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "api",
                    "assets-gateway",
                    "tree",
                    "groups",
                    "{{abb#postman_group}}",
                    "drives"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "create folder 'flux'",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"response contains expected attributes\", function () {",
                      "    ",
                      "    let respJson= pm.response.json()",
                      "    pm.expect(respJson).to.have.property('name');",
                      "    pm.expect(respJson).to.have.property('folderId');",
                      "    pm.expect(respJson).to.have.property('parentFolderId');",
                      "    pm.collectionVariables.set('abb#flux#updates#folderId', respJson.folderId)",
                      "})",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "description": "bearer token",
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{token}}"
                  },
                  {
                    "key": "user-name",
                    "value": "test",
                    "description": "Used only in full-local conf.",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"name\": \"flux\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/api/assets-gateway/tree/folders/{{abb#flux#updates#driveId}}",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "api",
                    "assets-gateway",
                    "tree",
                    "folders",
                    "{{abb#flux#updates#driveId}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "create_project",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"flux project located in expected drive/folder and of type 'flux-project'\", function () {",
                      "    ",
                      "    let respJson= pm.response.json()",
                      "    pm.expect(respJson).to.have.property('assetId');",
                      "    pm.expect(respJson).to.have.property('rawId');",
                      "    ",
                      "    ",
                      "    pm.collectionVariables.set('abb#flux#updates#assetId', respJson.assetId)",
                      "    pm.collectionVariables.set('abb#flux#updates#fluxProjectId', respJson.rawId)",
                      "    pm.collectionVariables.set('abb#flux#updates#fluxName', respJson.name)",
                      "})",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "description": "bearer token",
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{token}}"
                  },
                  {
                    "key": "user-name",
                    "value": "test",
                    "description": "Used only in full-local conf.",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{host}}/api/assets-gateway/assets/flux-project/location/{{abb#flux#updates#folderId}}",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "api",
                    "assets-gateway",
                    "assets",
                    "flux-project",
                    "location",
                    "{{abb#flux#updates#folderId}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "get tree items",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"flux project located in expected drive/folder and of type 'flux-project'\", function () {",
                      "    ",
                      "    let respJson= pm.response.json()",
                      "    pm.expect(respJson).to.have.property('items');",
                      "    pm.expect(respJson.items.length).to.eq(1);",
                      "    let item = respJson.items[0]",
                      "    ",
                      "    pm.expect(item.assetId).to.eq(pm.collectionVariables.get(\"abb#flux#updates#assetId\"));",
                      "    pm.expect(item.rawId).to.eq(pm.collectionVariables.get(\"abb#flux#updates#fluxProjectId\"));",
                      "    pm.expect(item.borrowed).to.eq(false);",
                      "})",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "description": "bearer token",
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{token}}"
                  },
                  {
                    "key": "user-name",
                    "value": "test",
                    "description": "Used only in full-local conf.",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{host}}/api/assets-gateway/tree/folders/{{abb#flux#updates#folderId}}/children",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "api",
                    "assets-gateway",
                    "tree",
                    "folders",
                    "{{abb#flux#updates#folderId}}",
                    "children"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "update asset",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Expected attributes\", function () {",
                      "    let respJson= pm.response.json()",
                      "    pm.expect(respJson).to.have.property('assetId');",
                      "    pm.expect(respJson).to.have.property('description');",
                      "    pm.expect(respJson).to.have.property('groupId');",
                      "    pm.expect(respJson).to.have.property('tags');",
                      "    pm.expect(respJson).to.have.property('images');",
                      "    pm.expect(respJson).to.have.property('thumbnails');",
                      "    pm.expect(respJson).to.have.property('rawId');",
                      "    pm.expect(respJson).to.have.property('kind');",
                      "    pm.expect(respJson).to.have.property('name');",
                      "",
                      "    pm.expect(respJson.name).to.eq(\"new name :)\")",
                      "    pm.expect(respJson.description).to.eq(\"new description\")",
                      "    ",
                      "})",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "description": "bearer token",
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{token}}"
                  },
                  {
                    "key": "user-name",
                    "value": "test",
                    "description": "Used only in full-local conf.",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"name\": \"new name :)\",\n    \"description\": \"new description\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/api/assets-gateway/assets/{{abb#flux#updates#assetId}}",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "api",
                    "assets-gateway",
                    "assets",
                    "{{abb#flux#updates#assetId}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "get flux project metadata",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"flux project located in expected drive/folder and of type 'flux-project'\", function () {",
                      "    ",
                      "    let respJson= pm.response.json()",
                      "    pm.expect(respJson).to.have.property('id');",
                      "    pm.expect(respJson).to.have.property('name');",
                      "    pm.expect(respJson).to.have.property('fluxPacks');",
                      "    pm.expect(respJson.id).to.eq(pm.collectionVariables.get(\"abb#flux#updates#fluxProjectId\"));",
                      "    pm.expect(respJson.name).to.eq(\"new name :)\");",
                      "    pm.expect(respJson.description).to.eq(\"new description\");",
                      "})",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "description": "bearer token",
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{token}}"
                  },
                  {
                    "key": "user-name",
                    "value": "test",
                    "description": "Used only in full-local conf.",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{host}}/api/flux-backend/projects/{{abb#flux#updates#fluxProjectId}}/metadata",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "api",
                    "flux-backend",
                    "projects",
                    "{{abb#flux#updates#fluxProjectId}}",
                    "metadata"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "delete folder",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "DELETE",
                "header": [
                  {
                    "description": "bearer token",
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{token}}"
                  },
                  {
                    "key": "user-name",
                    "value": "test",
                    "description": "Used only in full-local conf.",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{host}}/api/assets-gateway/tree/folders/{{abb#flux#updates#folderId}}",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "api",
                    "assets-gateway",
                    "tree",
                    "folders",
                    "{{abb#flux#updates#folderId}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "purge drive",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"1 folders deleted, 1 items deleted\", function () {",
                      "    ",
                      "    let respJson= pm.response.json()",
                      "    pm.expect(respJson).to.have.property('foldersCount');",
                      "    pm.expect(respJson).to.have.property('itemsCount');",
                      "    pm.expect(respJson.foldersCount).to.equal(1)",
                      "    pm.expect(respJson.itemsCount).to.equal(1)",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "DELETE",
                "header": [
                  {
                    "description": "bearer token",
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{token}}"
                  },
                  {
                    "key": "user-name",
                    "value": "test",
                    "description": "Used only in full-local conf.",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{host}}/api/assets-gateway/tree/drives/{{abb#flux#updates#driveId}}/purge",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "api",
                    "assets-gateway",
                    "tree",
                    "drives",
                    "{{abb#flux#updates#driveId}}",
                    "purge"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "delete drive",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "DELETE",
                "header": [
                  {
                    "description": "bearer token",
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{token}}"
                  },
                  {
                    "key": "user-name",
                    "value": "test",
                    "description": "Used only in full-local conf.",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"name\": \"a\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/api/assets-gateway/tree/drives/{{abb#flux#updates#driveId}}",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "api",
                    "assets-gateway",
                    "tree",
                    "drives",
                    "{{abb#flux#updates#driveId}}"
                  ]
                }
              },
              "response": []
            }
          ]
        }
      ]
    },
    {
      "name": "exposed-group",
      "item": [
        {
          "name": "post drive",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"response contains expected attributes\", function () {",
                  "    ",
                  "    let respJson= pm.response.json()",
                  "    pm.expect(respJson).to.have.property('driveId');",
                  "    pm.expect(respJson).to.have.property('name');",
                  "    pm.collectionVariables.set('abb#exposed-group#driveId', respJson.driveId)",
                  "})",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "description": "bearer token",
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"abb#exposed-group\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/api/assets-gateway/tree/groups/{{abb#postman_group}}/drives",
              "host": [
                "{{host}}"
              ],
              "path": [
                "api",
                "assets-gateway",
                "tree",
                "groups",
                "{{abb#postman_group}}",
                "drives"
              ]
            }
          },
          "response": []
        },
        {
          "name": "create folder 'folder'",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"response contains expected attributes\", function () {",
                  "    ",
                  "    let respJson= pm.response.json()",
                  "    pm.expect(respJson).to.have.property('name');",
                  "    pm.expect(respJson).to.have.property('folderId');",
                  "    pm.expect(respJson).to.have.property('parentFolderId');",
                  "    pm.collectionVariables.set('abb#exposed-group#folderId', respJson.folderId)",
                  "})",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "description": "bearer token",
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"folder-group\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/api/assets-gateway/tree/folders/{{abb#exposed-group#driveId}}",
              "host": [
                "{{host}}"
              ],
              "path": [
                "api",
                "assets-gateway",
                "tree",
                "folders",
                "{{abb#exposed-group#driveId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "post group",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"group is created with expected attributes\", function () {",
                  "    ",
                  "    let respJson= pm.response.json()",
                  "    let asset = respJson",
                  "    pm.expect(asset).to.have.property(\"assetId\")",
                  "    pm.expect(asset).to.have.property(\"kind\")",
                  "    pm.expect(asset).to.have.property(\"name\")",
                  "    pm.expect(asset).to.have.property(\"rawId\")",
                  "    pm.expect(asset).to.have.property(\"groupId\")",
                  "    pm.expect(asset).to.have.property(\"tags\")   ",
                  "",
                  "    pm.expect(asset.name).to.eq('private') ",
                  "    pm.expect(asset.kind).to.eq('group-showcase') ",
                  "})",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "description": "bearer token",
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"showcaseGroupId\":\"private\",\n    \"name\":\"private\",\n    \"folderId\":\"{{abb#exposed-group#folderId}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/api/assets-gateway/assets/group-showcase/location/{{abb#exposed-group#folderId}}",
              "host": [
                "{{host}}"
              ],
              "path": [
                "api",
                "assets-gateway",
                "assets",
                "group-showcase",
                "location",
                "{{abb#exposed-group#folderId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "get tree items",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"flux project located in expected drive/folder and of type 'flux-project'\", function () {",
                  "    ",
                  "    let respJson= pm.response.json()",
                  "    pm.expect(respJson).to.have.property('items');",
                  "    pm.expect(respJson.items.length).to.eq(1);",
                  "    let item = respJson.items[0]",
                  "    pm.expect(item.rawId).to.eq('private');",
                  "    pm.expect(item.borrowed).to.eq(false);",
                  "})",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "description": "bearer token",
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{token}}"
              }
            ],
            "url": {
              "raw": "{{host}}/api/assets-gateway/tree/folders/{{abb#exposed-group#folderId}}/children",
              "host": [
                "{{host}}"
              ],
              "path": [
                "api",
                "assets-gateway",
                "tree",
                "folders",
                "{{abb#exposed-group#folderId}}",
                "children"
              ]
            }
          },
          "response": []
        },
        {
          "name": "delete folder",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "description": "bearer token",
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{token}}"
              }
            ],
            "url": {
              "raw": "{{host}}/api/assets-gateway/tree/folders/{{abb#exposed-group#folderId}}",
              "host": [
                "{{host}}"
              ],
              "path": [
                "api",
                "assets-gateway",
                "tree",
                "folders",
                "{{abb#exposed-group#folderId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "purge drive",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"1 folders deleted, 1 items deleted\", function () {",
                  "    ",
                  "    let respJson= pm.response.json()",
                  "    pm.expect(respJson).to.have.property('foldersCount');",
                  "    pm.expect(respJson).to.have.property('itemsCount');",
                  "    pm.expect(respJson.foldersCount).to.equal(1)",
                  "    pm.expect(respJson.itemsCount).to.equal(1)",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "description": "bearer token",
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{token}}"
              }
            ],
            "url": {
              "raw": "{{host}}/api/assets-gateway/tree/drives/{{abb#exposed-group#driveId}}/purge",
              "host": [
                "{{host}}"
              ],
              "path": [
                "api",
                "assets-gateway",
                "tree",
                "drives",
                "{{abb#exposed-group#driveId}}",
                "purge"
              ]
            }
          },
          "response": []
        },
        {
          "name": "delete drive",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "description": "bearer token",
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"a\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/api/assets-gateway/tree/drives/{{abb#exposed-group#driveId}}",
              "host": [
                "{{host}}"
              ],
              "path": [
                "api",
                "assets-gateway",
                "tree",
                "drives",
                "{{abb#exposed-group#driveId}}"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "data",
      "item": [
        {
          "name": "text-file",
          "item": [
            {
              "name": "post drive",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"response contains expected attributes\", function () {",
                      "    ",
                      "    let respJson= pm.response.json()",
                      "    pm.expect(respJson).to.have.property('driveId');",
                      "    pm.expect(respJson).to.have.property('name');",
                      "    pm.collectionVariables.set('abb#data#text-file#driveId', respJson.driveId)",
                      "})",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "description": "bearer token",
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{token}}"
                  },
                  {
                    "key": "user-name",
                    "value": "test",
                    "description": "Used only in full-local conf.",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"name\": \"abb#exposed-group\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/api/assets-gateway/tree/groups/{{abb#postman_group}}/drives",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "api",
                    "assets-gateway",
                    "tree",
                    "groups",
                    "{{abb#postman_group}}",
                    "drives"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "create folder 'folder'",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"response contains expected attributes\", function () {",
                      "    ",
                      "    let respJson= pm.response.json()",
                      "    pm.expect(respJson).to.have.property('name');",
                      "    pm.expect(respJson).to.have.property('folderId');",
                      "    pm.expect(respJson).to.have.property('parentFolderId');",
                      "    pm.collectionVariables.set('abb#data#text-file#folderId', respJson.folderId)",
                      "})",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "description": "bearer token",
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{token}}"
                  },
                  {
                    "key": "user-name",
                    "value": "test",
                    "description": "Used only in full-local conf.",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"name\": \"folder-group\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/api/assets-gateway/tree/folders/{{abb#data#text-file#driveId}}",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "api",
                    "assets-gateway",
                    "tree",
                    "folders",
                    "{{abb#data#text-file#driveId}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "add data",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"expected asset attributes are returned\", function () {",
                      "    let respJson= pm.response.json()",
                      "    let asset = respJson",
                      "    pm.expect(asset).to.have.property(\"assetId\")",
                      "    pm.expect(asset).to.have.property(\"kind\")",
                      "    pm.expect(asset).to.have.property(\"name\")",
                      "    pm.expect(asset).to.have.property(\"rawId\")",
                      "    pm.expect(asset).to.have.property(\"groupId\")",
                      "    pm.expect(asset).to.have.property(\"tags\")   ",
                      "",
                      "    pm.expect(asset.name).to.eq('Chart.yaml') ",
                      "    pm.expect(asset.kind).to.eq('data') ",
                      "    pm.collectionVariables.set('abb#data#text-file#relatedId', respJson.rawId)",
                      "})",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "description": "bearer token",
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{token}}"
                  },
                  {
                    "key": "user-name",
                    "value": "test",
                    "description": "Used only in full-local conf.",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "file",
                      "type": "file",
                      "src": "services/assets-gateway/tests/test-data/Chart.yaml"
                    }
                  ],
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/api/assets-gateway/assets/data/location/{{abb#data#text-file#folderId}}",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "api",
                    "assets-gateway",
                    "assets",
                    "data",
                    "location",
                    "{{abb#data#text-file#folderId}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "get tree items",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"get the item through tree-db\", function () {",
                      "    ",
                      "    let respJson= pm.response.json()",
                      "    pm.expect(respJson).to.have.property('items');",
                      "    pm.expect(respJson.items.length).to.eq(1);",
                      "    let item = respJson.items[0]",
                      "    pm.expect(item).to.have.property('treeId')",
                      "    pm.expect(item).to.have.property('folderId')",
                      "    pm.expect(item).to.have.property('rawId')",
                      "    pm.expect(item).to.have.property('assetId')",
                      "    pm.expect(item).to.have.property('groupId')",
                      "    pm.expect(item.borrowed).to.eq(false);",
                      "    pm.expect(item.name).to.eq(\"Chart.yaml\");",
                      "    pm.expect(item.kind).to.eq(\"data\");",
                      "})",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "description": "bearer token",
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{token}}"
                  },
                  {
                    "key": "user-name",
                    "value": "test",
                    "description": "Used only in full-local conf.",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{host}}/api/assets-gateway/tree/folders/{{abb#data#text-file#folderId}}/children",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "api",
                    "assets-gateway",
                    "tree",
                    "folders",
                    "{{abb#data#text-file#folderId}}",
                    "children"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "get content",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"retrieve the content\", function () {",
                      "    ",
                      "    let respTxt= pm.response.text()    ",
                      "    pm.expect(respTxt.slice(0,14)).to.equal('apiVersion: v2')",
                      "    pm.expect(pm.response.headers.get('content-type')).to.eq('text/yaml')",
                      "    pm.expect(pm.response.headers.get('content-encoding')).to.eq('')",
                      "})",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "description": "bearer token",
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{token}}"
                  },
                  {
                    "key": "user-name",
                    "value": "test",
                    "description": "Used only in full-local conf.",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{host}}/api/assets-gateway/raw/data/{{abb#data#text-file#relatedId}}",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "api",
                    "assets-gateway",
                    "raw",
                    "data",
                    "{{abb#data#text-file#relatedId}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "get preview",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"retrieve the content\", function () {",
                      "    ",
                      "    let respJson= pm.response.json()    ",
                      "    pm.expect(respJson.kind).to.eq(\"text\")",
                      "    pm.expect(respJson.content.slice(0,14)).to.equal('apiVersion: v2')",
                      "})",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "description": "bearer token",
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{token}}"
                  },
                  {
                    "key": "user-name",
                    "value": "test",
                    "description": "Used only in full-local conf.",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{host}}/api/assets-gateway/raw/data/metadata/{{abb#data#text-file#relatedId}}/preview",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "api",
                    "assets-gateway",
                    "raw",
                    "data",
                    "metadata",
                    "{{abb#data#text-file#relatedId}}",
                    "preview"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "delete folder",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "DELETE",
                "header": [
                  {
                    "description": "bearer token",
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{token}}"
                  },
                  {
                    "key": "user-name",
                    "value": "test",
                    "description": "Used only in full-local conf.",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{host}}/api/assets-gateway/tree/folders/{{abb#data#text-file#folderId}}",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "api",
                    "assets-gateway",
                    "tree",
                    "folders",
                    "{{abb#data#text-file#folderId}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "purge drive",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"1 folders deleted, 1 items deleted\", function () {",
                      "    ",
                      "    let respJson= pm.response.json()",
                      "    pm.expect(respJson).to.have.property('foldersCount');",
                      "    pm.expect(respJson).to.have.property('itemsCount');",
                      "    pm.expect(respJson.foldersCount).to.equal(1)",
                      "    pm.expect(respJson.itemsCount).to.equal(1)",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "DELETE",
                "header": [
                  {
                    "description": "bearer token",
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{token}}"
                  },
                  {
                    "key": "user-name",
                    "value": "test",
                    "description": "Used only in full-local conf.",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{host}}/api/assets-gateway/tree/drives/{{abb#data#text-file#driveId}}/purge",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "api",
                    "assets-gateway",
                    "tree",
                    "drives",
                    "{{abb#data#text-file#driveId}}",
                    "purge"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "get content",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "description": "bearer token",
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{token}}"
                  },
                  {
                    "key": "user-name",
                    "value": "test",
                    "description": "Used only in full-local conf.",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{host}}/api/assets-gateway/raw/data/{{abb#data#text-file#relatedId}}",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "api",
                    "assets-gateway",
                    "raw",
                    "data",
                    "{{abb#data#text-file#relatedId}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "delete drive",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "DELETE",
                "header": [
                  {
                    "description": "bearer token",
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{token}}"
                  },
                  {
                    "key": "user-name",
                    "value": "test",
                    "description": "Used only in full-local conf.",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"name\": \"a\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/api/assets-gateway/tree/drives/{{abb#data#text-file#driveId}}",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "api",
                    "assets-gateway",
                    "tree",
                    "drives",
                    "{{abb#data#text-file#driveId}}"
                  ]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "image-file",
          "item": [
            {
              "name": "post drive",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"response contains expected attributes\", function () {",
                      "    ",
                      "    let respJson= pm.response.json()",
                      "    pm.expect(respJson).to.have.property('driveId');",
                      "    pm.expect(respJson).to.have.property('name');",
                      "    pm.collectionVariables.set('abb#data#image-file#driveId', respJson.driveId)",
                      "})",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "description": "bearer token",
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{token}}"
                  },
                  {
                    "key": "user-name",
                    "value": "test",
                    "description": "Used only in full-local conf.",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"name\": \"abb#exposed-group\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/api/assets-gateway/tree/groups/{{abb#postman_group}}/drives",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "api",
                    "assets-gateway",
                    "tree",
                    "groups",
                    "{{abb#postman_group}}",
                    "drives"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "create folder 'folder'",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"response contains expected attributes\", function () {",
                      "    ",
                      "    let respJson= pm.response.json()",
                      "    pm.expect(respJson).to.have.property('name');",
                      "    pm.expect(respJson).to.have.property('folderId');",
                      "    pm.expect(respJson).to.have.property('parentFolderId');",
                      "    pm.collectionVariables.set('abb#data#image-file#folderId', respJson.folderId)",
                      "})",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "description": "bearer token",
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{token}}"
                  },
                  {
                    "key": "user-name",
                    "value": "test",
                    "description": "Used only in full-local conf.",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"name\": \"folder-group\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/api/assets-gateway/tree/folders/{{abb#data#image-file#driveId}}",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "api",
                    "assets-gateway",
                    "tree",
                    "folders",
                    "{{abb#data#image-file#driveId}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "add data",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"expected asset attributes are returned\", function () {",
                      "    let respJson= pm.response.json()",
                      "    let asset = respJson",
                      "    pm.expect(asset).to.have.property(\"assetId\")",
                      "    pm.expect(asset).to.have.property(\"kind\")",
                      "    pm.expect(asset).to.have.property(\"name\")",
                      "    pm.expect(asset).to.have.property(\"rawId\")",
                      "    pm.expect(asset).to.have.property(\"groupId\")",
                      "    pm.expect(asset).to.have.property(\"tags\")   ",
                      "",
                      "    pm.expect(asset.name).to.eq('logo_YouWol_2020.png') ",
                      "    pm.expect(asset.kind).to.eq('data') ",
                      "    pm.collectionVariables.set('abb#data#image-file#relatedId', respJson.rawId)",
                      "    pm.collectionVariables.set('abb#data#image-file#assetId', respJson.assetId)",
                      "})",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "description": "bearer token",
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{token}}"
                  },
                  {
                    "key": "user-name",
                    "value": "test",
                    "description": "Used only in full-local conf.",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "file",
                      "type": "file",
                      "src": "services/assets-gateway/tests/test-data/logo_YouWol_2020.png"
                    }
                  ],
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/api/assets-gateway/assets/data/location/{{abb#data#image-file#folderId}}",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "api",
                    "assets-gateway",
                    "assets",
                    "data",
                    "location",
                    "{{abb#data#image-file#folderId}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "get tree items",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"get the item through tree-db\", function () {",
                      "    ",
                      "    let respJson= pm.response.json()",
                      "    pm.expect(respJson).to.have.property('items');",
                      "    pm.expect(respJson.items.length).to.eq(1);",
                      "    let item = respJson.items[0]",
                      "",
                      "    pm.expect(item).to.have.property('treeId')",
                      "    pm.expect(item).to.have.property('folderId')",
                      "    pm.expect(item).to.have.property('rawId')",
                      "    pm.expect(item).to.have.property('assetId')",
                      "    pm.expect(item).to.have.property('groupId')",
                      "    pm.expect(item.borrowed).to.eq(false);",
                      "    pm.expect(item.name).to.eq(\"logo_YouWol_2020.png\");",
                      "    pm.expect(item.kind).to.eq(\"data\");",
                      "    ",
                      "})",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "description": "bearer token",
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{token}}"
                  },
                  {
                    "key": "user-name",
                    "value": "test",
                    "description": "Used only in full-local conf.",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{host}}/api/assets-gateway/tree/folders/{{abb#data#image-file#folderId}}/children",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "api",
                    "assets-gateway",
                    "tree",
                    "folders",
                    "{{abb#data#image-file#folderId}}",
                    "children"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "get content",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"retrieve the content\", function () {",
                      "    ",
                      "    let respTxt= pm.response.text()    ",
                      "    pm.expect(pm.response.headers.get('content-type')).to.eq('image/png')",
                      "    pm.expect(pm.response.headers.get('content-encoding')).to.eq('')",
                      "})",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "description": "bearer token",
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{token}}"
                  },
                  {
                    "key": "user-name",
                    "value": "test",
                    "description": "Used only in full-local conf.",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{host}}/api/assets-gateway/raw/data/{{abb#data#image-file#relatedId}}",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "api",
                    "assets-gateway",
                    "raw",
                    "data",
                    "{{abb#data#image-file#relatedId}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "get asset",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"retrieve the content\", function () {",
                      "    respJson = pm.response.json()",
                      "    pm.expect(respJson.name).to.eq(\"logo_YouWol_2020.png\")",
                      "    pm.expect(respJson.relatedId).to.eq(pm.collectionVariables.get(\"abb#data#image-file#relatedId\"))",
                      "    pm.expect(respJson.images.length).to.eq(1)",
                      "    pm.expect(respJson.thumbnails.length).to.eq(1)",
                      "    pm.collectionVariables.set('abb#data#image-file#thumbnails-url', respJson.thumbnails[0])",
                      "})",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "description": "bearer token",
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{token}}"
                  },
                  {
                    "key": "user-name",
                    "value": "test",
                    "description": "Used only in full-local conf.",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{host}}/api/assets-backend/assets/{{abb#data#image-file#assetId}}",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "api",
                    "assets-backend",
                    "assets",
                    "{{abb#data#image-file#assetId}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "get thumbnail",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"retrieve the thumbnail\", function () {",
                      "    pm.expect(pm.response.headers.get('content-type')).to.eq('image/png')",
                      "})",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "description": "bearer token",
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{token}}"
                  },
                  {
                    "key": "user-name",
                    "value": "test",
                    "description": "Used only in full-local conf.",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{host}}{{abb#data#image-file#thumbnails-url}}",
                  "host": [
                    "{{host}}{{abb#data#image-file#thumbnails-url}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "get preview",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"retrieve the content\", function () {",
                      "    ",
                      "    let respJson= pm.response.json()    ",
                      "    pm.expect(respJson.kind).to.eq(\"image\")",
                      "",
                      "    pm.collectionVariables.set('abb#data#image-file#preview-url', respJson.content)",
                      "",
                      "})",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "description": "bearer token",
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{token}}"
                  },
                  {
                    "key": "user-name",
                    "value": "test",
                    "description": "Used only in full-local conf.",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{host}}/api/assets-gateway/raw/data/metadata/{{abb#data#image-file#relatedId}}/preview",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "api",
                    "assets-gateway",
                    "raw",
                    "data",
                    "metadata",
                    "{{abb#data#image-file#relatedId}}",
                    "preview"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "get preview image",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"retrieve the thumbnail\", function () {",
                      "    pm.expect(pm.response.headers.get('content-type')).to.eq('image/png')",
                      "})",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "description": "bearer token",
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{token}}"
                  },
                  {
                    "key": "user-name",
                    "value": "test",
                    "description": "Used only in full-local conf.",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{host}}{{abb#data#image-file#preview-url}}",
                  "host": [
                    "{{host}}{{abb#data#image-file#preview-url}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "delete folder",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "DELETE",
                "header": [
                  {
                    "description": "bearer token",
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{token}}"
                  },
                  {
                    "key": "user-name",
                    "value": "test",
                    "description": "Used only in full-local conf.",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{host}}/api/assets-gateway/tree/folders/{{abb#data#image-file#folderId}}",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "api",
                    "assets-gateway",
                    "tree",
                    "folders",
                    "{{abb#data#image-file#folderId}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "purge drive",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"1 folders deleted, 1 items deleted\", function () {",
                      "    ",
                      "    let respJson= pm.response.json()",
                      "    pm.expect(respJson).to.have.property('foldersCount');",
                      "    pm.expect(respJson).to.have.property('itemsCount');",
                      "    pm.expect(respJson.foldersCount).to.equal(1)",
                      "    pm.expect(respJson.itemsCount).to.equal(1)",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "DELETE",
                "header": [
                  {
                    "description": "bearer token",
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{token}}"
                  },
                  {
                    "key": "user-name",
                    "value": "test",
                    "description": "Used only in full-local conf.",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{host}}/api/assets-gateway/tree/drives/{{abb#data#image-file#driveId}}/purge",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "api",
                    "assets-gateway",
                    "tree",
                    "drives",
                    "{{abb#data#image-file#driveId}}",
                    "purge"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "get content",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "description": "bearer token",
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{token}}"
                  },
                  {
                    "key": "user-name",
                    "value": "test",
                    "description": "Used only in full-local conf.",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{host}}/api/assets-gateway/raw/data/{{abb#data#image-file#relatedId}}",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "api",
                    "assets-gateway",
                    "raw",
                    "data",
                    "{{abb#data#image-file#relatedId}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "get thumbnail",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "description": "bearer token",
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{token}}"
                  },
                  {
                    "key": "user-name",
                    "value": "test",
                    "description": "Used only in full-local conf.",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{host}}{{abb#data#image-file#thumbnails-url}}",
                  "host": [
                    "{{host}}{{abb#data#image-file#thumbnails-url}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "get preview image",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "description": "bearer token",
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{token}}"
                  },
                  {
                    "key": "user-name",
                    "value": "test",
                    "description": "Used only in full-local conf.",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{host}}{{abb#data#image-file#preview-url}}",
                  "host": [
                    "{{host}}{{abb#data#image-file#preview-url}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "delete drive",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "DELETE",
                "header": [
                  {
                    "description": "bearer token",
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{token}}"
                  },
                  {
                    "key": "user-name",
                    "value": "test",
                    "description": "Used only in full-local conf.",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"name\": \"a\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/api/assets-gateway/tree/drives/{{abb#data#image-file#driveId}}",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "api",
                    "assets-gateway",
                    "tree",
                    "drives",
                    "{{abb#data#image-file#driveId}}"
                  ]
                }
              },
              "response": []
            }
          ]
        }
      ]
    },
    {
      "name": "flux-pack",
      "item": [
        {
          "name": "import",
          "item": [
            {
              "name": "prepare flux-pack in cdn",
              "item": [
                {
                  "name": "upload test data",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "pm.test(\"14 files 5 libraries\", function () {",
                          "    resp = pm.response.json()",
                          "    pm.expect(resp.filesCount).to.equal(14)",
                          "    pm.expect(resp.librariesCount).to.equal(5)",
                          "    pm.expect(resp.namespaces).to.deep.equal([\"postman-gateway\"])",
                          "",
                          "    pm.collectionVariables.set(\"abb#flux-pack#import#relatedId\", \"QHBvc3RtYW4tZ2F0ZXdheS9mbHV4LWRhdGFmcmFtZQ==\")",
                          "});",
                          "",
                          "",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Authorization",
                        "type": "text",
                        "value": "Bearer {{token}}"
                      }
                    ],
                    "body": {
                      "mode": "formdata",
                      "formdata": [
                        {
                          "key": "file",
                          "type": "file",
                          "src": "services/assets-gateway/tests/test-data/cdn.zip"
                        }
                      ]
                    },
                    "url": {
                      "raw": "{{cdn-host}}/api/cdn-backend/actions/sync",
                      "host": [
                        "{{cdn-host}}"
                      ],
                      "path": [
                        "api",
                        "cdn-backend",
                        "actions",
                        "sync"
                      ]
                    }
                  },
                  "response": []
                }
              ]
            },
            {
              "name": "post drive",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"response contains expected attributes\", function () {",
                      "    ",
                      "    let respJson= pm.response.json()",
                      "    pm.expect(respJson).to.have.property('driveId');",
                      "    pm.expect(respJson).to.have.property('name');",
                      "    pm.collectionVariables.set('abb#flux-pack#import#driveId', respJson.driveId)",
                      "})",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "description": "bearer token",
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{token}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"name\": \"abb#exposed-group\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/api/assets-gateway/tree/groups/{{abb#postman_group}}/drives",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "api",
                    "assets-gateway",
                    "tree",
                    "groups",
                    "{{abb#postman_group}}",
                    "drives"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "create folder 'folder'",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"response contains expected attributes\", function () {",
                      "    ",
                      "    let respJson= pm.response.json()",
                      "    pm.expect(respJson).to.have.property('name');",
                      "    pm.expect(respJson).to.have.property('folderId');",
                      "    pm.expect(respJson).to.have.property('parentFolderId');",
                      "    pm.collectionVariables.set('abb#flux-pack#import#folderId', respJson.folderId)",
                      "})",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "description": "bearer token",
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{token}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"name\": \"folder-group\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/api/assets-gateway/tree/folders/{{abb#flux-pack#import#driveId}}",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "api",
                    "assets-gateway",
                    "tree",
                    "folders",
                    "{{abb#flux-pack#import#driveId}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "register flux-dataframe in assets - private as default",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Initial asset created returned\", function () {",
                      "    let respJson= pm.response.json()",
                      "    pm.expect(respJson).to.have.property('relatedId');",
                      "    pm.expect(respJson).to.have.property('assetId');",
                      "    pm.expect(respJson).to.have.property('name');",
                      "    pm.expect(respJson).to.have.property('images');",
                      "    pm.expect(respJson).to.have.property('thumbnails');",
                      "    pm.expect(respJson).to.have.property('tags');",
                      "    pm.expect(respJson).to.have.property('description');",
                      "    pm.expect(respJson).to.have.property('groupId');",
                      "",
                      "    pm.expect(respJson.kind).to.eq('package');",
                      "    pm.expect(respJson.relatedId).to.eq(pm.collectionVariables.get(\"abb#flux-pack#import#relatedId\"));",
                      "    pm.collectionVariables.set(\"abb#flux-pack#import#assetId\",respJson.assetId)",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  },
                  {
                    "description": "bearer token",
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{token}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"relatedId\": \"{{abb#flux-pack#import#relatedId}}\",\n    \"kind\": \"package\",\n    \"groupId\": \"{{abb#postman_group}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/api/assets-backend/assets",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "api",
                    "assets-backend",
                    "assets"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "register in tree",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "",
                      "pm.test(\"retrieve expected attributes\", function () {",
                      "    ",
                      "    let respJson= pm.response.json()",
                      "    pm.expect(respJson).to.have.property('items');",
                      "    pm.expect(respJson.items.length).to.eq(1);",
                      "    let item = respJson.items[0]",
                      "    pm.expect(item).to.have.property('treeId')",
                      "    pm.expect(item).to.have.property('folderId')",
                      "    pm.expect(item).to.have.property('kind')",
                      "    pm.expect(item).to.have.property('assetId')",
                      "    pm.expect(item).to.have.property('rawId')",
                      "    pm.expect(item).to.have.property('borrowed')",
                      "",
                      "    pm.expect(item.assetId).to.eq(pm.collectionVariables.get(\"abb#flux-pack#import#assetId\"))",
                      "    pm.expect(item.rawId).to.eq(pm.collectionVariables.get(\"abb#flux-pack#import#relatedId\"))",
                      "    pm.expect(item.borrowed).to.eq(false)",
                      "    pm.expect(item.kind).to.eq(\"package\")",
                      "",
                      "})"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  },
                  {
                    "description": "bearer token",
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{token}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"folderId\": \"{{abb#flux-pack#import#folderId}}\",\n    \"assetIds\": [\"{{abb#flux-pack#import#assetId}}\"]\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/api/assets-gateway/assets/register-in-tree",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "api",
                    "assets-gateway",
                    "assets",
                    "register-in-tree"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "get tree items",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"get the item through tree-db\", function () {",
                      "    ",
                      "    let respJson= pm.response.json()",
                      "    pm.expect(respJson).to.have.property('items');",
                      "    pm.expect(respJson.items.length).to.eq(1);",
                      "",
                      "    let item = respJson.items[0]    ",
                      "    pm.expect(item.kind).to.eq(\"package\");",
                      "",
                      "    pm.expect(item).to.have.property('treeId')",
                      "    pm.expect(item).to.have.property('folderId')",
                      "    pm.expect(item).to.have.property('rawId')",
                      "    pm.expect(item).to.have.property('assetId')",
                      "    pm.expect(item).to.have.property('groupId')",
                      "    pm.expect(item.borrowed).to.eq(false);",
                      "    ",
                      "})",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "description": "bearer token",
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{token}}"
                  }
                ],
                "url": {
                  "raw": "{{host}}/api/assets-gateway/tree/folders/{{abb#flux-pack#import#folderId}}/children",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "api",
                    "assets-gateway",
                    "tree",
                    "folders",
                    "{{abb#flux-pack#import#folderId}}",
                    "children"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "get raw package flux-dataframe",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"get javascript code\", function () {",
                      "    pm.expect(pm.response.text()).to.eq('this is a test for content\\n');",
                      "    ",
                      "})",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "description": "bearer token",
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{token}}"
                  }
                ],
                "url": {
                  "raw": "{{host}}/api/assets-gateway/raw/package/QHBvc3RtYW4tZ2F0ZXdheS9mbHV4LWRhdGFmcmFtZQ==/0.0.1/bundles/flux-dataframe.umd.js",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "api",
                    "assets-gateway",
                    "raw",
                    "package",
                    "QHBvc3RtYW4tZ2F0ZXdheS9mbHV4LWRhdGFmcmFtZQ==",
                    "0.0.1",
                    "bundles",
                    "flux-dataframe.umd.js"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "get package metadata",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"package metadata: get expected data\", function () {",
                      "    let resp = pm.response.json()",
                      "    pm.expect(resp.name).to.eq('@postman-gateway/flux-dataframe');",
                      "    pm.expect(resp.versions).to.deep.eq([\"0.0.1\", \"0.0.0\"]);",
                      "    pm.expect(resp.namespace).to.eq(\"postman-gateway\")",
                      "    pm.expect(resp.id).to.eq(\"QHBvc3RtYW4tZ2F0ZXdheS9mbHV4LWRhdGFmcmFtZQ==\")",
                      "    pm.expect(resp).to.haveOwnProperty(\"releases\")",
                      "    pm.expect(resp.releases.length).to.eq(2)",
                      "    pm.expect(resp.releases[0]).to.deep.eq( {",
                      "            \"version\": \"0.0.1\",",
                      "            \"fingerprint\": \"6e0a7556225e6d64279967b9834e9a80\"",
                      "        });",
                      "    ",
                      "})",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "description": "bearer token",
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{token}}"
                  }
                ],
                "url": {
                  "raw": "{{host}}/api/assets-gateway/raw/package/metadata/QHBvc3RtYW4tZ2F0ZXdheS9mbHV4LWRhdGFmcmFtZQ==",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "api",
                    "assets-gateway",
                    "raw",
                    "package",
                    "metadata",
                    "QHBvc3RtYW4tZ2F0ZXdheS9mbHV4LWRhdGFmcmFtZQ=="
                  ]
                }
              },
              "response": []
            },
            {
              "name": "loading graph",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"loading graph: quick check\", function () {",
                      "    resp = pm.response.json()",
                      "    pm.expect(resp.graphType).to.equal(\"sequential-v1\")",
                      "    pm.expect(resp.definition.length).to.equal(3)",
                      "    pm.expect(resp.lock.length).to.equal(6)",
                      "    pm.expect(resp.definition.map(d=>d.length)).to.deep.equal([4,1,1])",
                      "})",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "description": "bearer token",
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{token}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"libraries\": {\n        \"@postman-gateway/flux-dataframe\": \"0.0.1\"\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/api/assets-gateway/cdn/queries/loading-graph",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "api",
                    "assets-gateway",
                    "cdn",
                    "queries",
                    "loading-graph"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "log as anonymous",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var response_json = pm.response.json();\r",
                      "var token = response_json.access_token;\r",
                      "pm.collectionVariables.set('token', token);"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/x-www-form-urlencoded"
                  },
                  {
                    "key": "",
                    "type": "text",
                    "value": ""
                  }
                ],
                "body": {
                  "mode": "urlencoded",
                  "urlencoded": [
                    {
                      "key": "client_id",
                      "value": "{{clientId}}",
                      "type": "text"
                    },
                    {
                      "key": "grant_type",
                      "value": "client_credentials",
                      "type": "text"
                    },
                    {
                      "key": "client_secret",
                      "value": "{{clientSecret}}",
                      "type": "text"
                    }
                  ]
                },
                "url": {
                  "raw": "{{auth-url}}",
                  "host": [
                    "{{auth-url}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "get package => unauthorized",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "description": "bearer token",
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{token}}"
                  }
                ],
                "url": {
                  "raw": "{{host}}/api/assets-gateway/cdn/libraries/@postman-gateway/flux-dataframe/0.0.1",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "api",
                    "assets-gateway",
                    "cdn",
                    "libraries",
                    "@postman-gateway",
                    "flux-dataframe",
                    "0.0.1"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "delete version library unauthorized",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "DELETE",
                "header": [
                  {
                    "description": "bearer token",
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{token}}"
                  }
                ],
                "url": {
                  "raw": "{{host}}/api/assets-gateway/cdn/libraries/@postman-gateway/flux-dataframe/0.0.0",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "api",
                    "assets-gateway",
                    "cdn",
                    "libraries",
                    "@postman-gateway",
                    "flux-dataframe",
                    "0.0.0"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "log as test_account",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var response_json = pm.response.json();\r",
                      "var token = response_json.access_token;\r",
                      "pm.collectionVariables.set('token', token);\r",
                      "\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/x-www-form-urlencoded"
                  }
                ],
                "body": {
                  "mode": "urlencoded",
                  "urlencoded": [
                    {
                      "key": "username",
                      "value": "{{defaultUser}}",
                      "type": "text"
                    },
                    {
                      "key": "password",
                      "value": "{{password}}",
                      "type": "text"
                    },
                    {
                      "key": "client_id",
                      "value": "{{clientId}}",
                      "type": "text"
                    },
                    {
                      "key": "grant_type",
                      "value": "password",
                      "type": "text"
                    },
                    {
                      "key": "client_secret",
                      "value": "{{clientSecret}}",
                      "type": "text"
                    }
                  ]
                },
                "url": {
                  "raw": "{{auth-url}}",
                  "host": [
                    "{{auth-url}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "get package => authorized",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "description": "bearer token",
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{token}}"
                  }
                ],
                "url": {
                  "raw": "{{host}}/api/assets-gateway/cdn/libraries/@postman-gateway/flux-dataframe/0.0.1",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "api",
                    "assets-gateway",
                    "cdn",
                    "libraries",
                    "@postman-gateway",
                    "flux-dataframe",
                    "0.0.1"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "delete version library authorized",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "DELETE",
                "header": [
                  {
                    "description": "bearer token",
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{token}}"
                  }
                ],
                "url": {
                  "raw": "{{host}}/api/assets-gateway/cdn/libraries/@postman-gateway/flux-dataframe/0.0.0",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "api",
                    "assets-gateway",
                    "cdn",
                    "libraries",
                    "@postman-gateway",
                    "flux-dataframe",
                    "0.0.0"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "delete folder",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "DELETE",
                "header": [
                  {
                    "description": "bearer token",
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{token}}"
                  }
                ],
                "url": {
                  "raw": "{{host}}/api/assets-gateway/tree/folders/{{abb#flux-pack#import#folderId}}",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "api",
                    "assets-gateway",
                    "tree",
                    "folders",
                    "{{abb#flux-pack#import#folderId}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "purge drive",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"1 folders deleted, 1 items deleted\", function () {",
                      "    ",
                      "    let respJson= pm.response.json()",
                      "    pm.expect(respJson).to.have.property('foldersCount');",
                      "    pm.expect(respJson).to.have.property('itemsCount');",
                      "    pm.expect(respJson.foldersCount).to.equal(1)",
                      "    pm.expect(respJson.itemsCount).to.equal(1)",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "DELETE",
                "header": [
                  {
                    "description": "bearer token",
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{token}}"
                  }
                ],
                "url": {
                  "raw": "{{host}}/api/assets-gateway/tree/drives/{{abb#flux-pack#import#driveId}}/purge",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "api",
                    "assets-gateway",
                    "tree",
                    "drives",
                    "{{abb#flux-pack#import#driveId}}",
                    "purge"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "delete drive",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "DELETE",
                "header": [
                  {
                    "description": "bearer token",
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{token}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"name\": \"a\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/api/assets-gateway/tree/drives/{{abb#flux-pack#import#driveId}}",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "api",
                    "assets-gateway",
                    "tree",
                    "drives",
                    "{{abb#flux-pack#import#driveId}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "clear namespace postman-gateway",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "DELETE",
                "header": [
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{token}}"
                  }
                ],
                "url": {
                  "raw": "{{cdn-host}}/api/cdn-backend/namespace/postman-gateway",
                  "host": [
                    "{{cdn-host}}"
                  ],
                  "path": [
                    "api",
                    "cdn-backend",
                    "namespace",
                    "postman-gateway"
                  ]
                }
              },
              "response": []
            }
          ]
        }
      ]
    },
    {
      "name": "assets",
      "item": [
        {
          "name": "post drive",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"response contains expected attributes\", function () {",
                  "    ",
                  "    let respJson= pm.response.json()",
                  "    pm.expect(respJson).to.have.property('driveId');",
                  "    pm.expect(respJson).to.have.property('name');",
                  "    pm.collectionVariables.set('abb#assets#driveId', respJson.driveId)",
                  "})",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "description": "bearer token",
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"abb#exposed-group\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/api/assets-gateway/tree/groups/{{abb#postman_group}}/drives",
              "host": [
                "{{host}}"
              ],
              "path": [
                "api",
                "assets-gateway",
                "tree",
                "groups",
                "{{abb#postman_group}}",
                "drives"
              ]
            }
          },
          "response": []
        },
        {
          "name": "create folder 'folder'",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"response contains expected attributes\", function () {",
                  "    ",
                  "    let respJson= pm.response.json()",
                  "    pm.expect(respJson).to.have.property('name');",
                  "    pm.expect(respJson).to.have.property('folderId');",
                  "    pm.expect(respJson).to.have.property('parentFolderId');",
                  "    pm.collectionVariables.set('abb#assets#folderId', respJson.folderId)",
                  "})",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "description": "bearer token",
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"folder-group\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/api/assets-gateway/tree/folders/{{abb#assets#driveId}}",
              "host": [
                "{{host}}"
              ],
              "path": [
                "api",
                "assets-gateway",
                "tree",
                "folders",
                "{{abb#assets#driveId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "post group",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"group is created with expected attributes\", function () {",
                  "    ",
                  "    let respJson= pm.response.json()",
                  "    let asset = respJson",
                  "    pm.expect(asset).to.have.property(\"assetId\")",
                  "    pm.expect(asset).to.have.property(\"kind\")",
                  "    pm.expect(asset).to.have.property(\"name\")",
                  "    pm.expect(asset).to.have.property(\"rawId\")",
                  "    pm.expect(asset).to.have.property(\"groupId\")",
                  "    pm.expect(asset).to.have.property(\"tags\")   ",
                  "",
                  "    pm.expect(asset.name).to.eq('private') ",
                  "    pm.expect(asset.kind).to.eq('group-showcase') ",
                  "    pm.collectionVariables.set('abb#assets#treeId', respJson.treeId)",
                  "    pm.collectionVariables.set('abb#assets#assetId', respJson.assetId)",
                  "})",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "description": "bearer token",
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"showcaseGroupId\":\"private\",\n    \"name\":\"private\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/api/assets-gateway/assets/group-showcase/location/{{abb#assets#folderId}}",
              "host": [
                "{{host}}"
              ],
              "path": [
                "api",
                "assets-gateway",
                "assets",
                "group-showcase",
                "location",
                "{{abb#assets#folderId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "post image",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"pictures list contains new element\", function () {",
                  "    ",
                  "    let respJson= pm.response.json()",
                  "    let asset = respJson",
                  "    pm.expect(asset).to.have.property(\"assetId\")",
                  "    pm.expect(asset).to.have.property(\"kind\")",
                  "    pm.expect(asset).to.have.property(\"name\")",
                  "    pm.expect(asset).to.have.property(\"rawId\")",
                  "    pm.expect(asset).to.have.property(\"groupId\")",
                  "    pm.expect(asset).to.have.property(\"tags\")   ",
                  "",
                  "    pm.expect(asset.name).to.eq('private') ",
                  "    pm.expect(asset.kind).to.eq('group-showcase') ",
                  "    pm.expect(asset.images.length).to.eq(1)",
                  "    pm.expect(asset.thumbnails.length).to.eq(1)",
                  "    pm.expect(asset.images[0].split('/').slice(-1)[0]).to.eq('logo_youwol.png')",
                  "    pm.expect(asset.thumbnails[0].split('/').slice(-1)[0]).to.eq('logo_youwol.png')",
                  "})",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "description": "bearer token",
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{token}}"
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "file",
                  "type": "file",
                  "src": "services/assets-gateway/tests/test-data/logo_YouWol_2020.png"
                }
              ],
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/api/assets-gateway/assets/{{abb#assets#assetId}}/images/logo_youwol.png",
              "host": [
                "{{host}}"
              ],
              "path": [
                "api",
                "assets-gateway",
                "assets",
                "{{abb#assets#assetId}}",
                "images",
                "logo_youwol.png"
              ]
            }
          },
          "response": []
        },
        {
          "name": "delete image",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"pictures list updated\", function () {",
                  "    ",
                  "    let respJson= pm.response.json()",
                  "    let asset = respJson",
                  "    pm.expect(asset).to.have.property(\"assetId\")",
                  "    pm.expect(asset).to.have.property(\"kind\")",
                  "    pm.expect(asset).to.have.property(\"name\")",
                  "    pm.expect(asset).to.have.property(\"rawId\")",
                  "    pm.expect(asset).to.have.property(\"groupId\")",
                  "    pm.expect(asset).to.have.property(\"tags\")   ",
                  "",
                  "    pm.expect(asset.name).to.eq('private') ",
                  "    pm.expect(asset.kind).to.eq('group-showcase') ",
                  "    pm.expect(asset.images.length).to.eq(0)",
                  "    pm.expect(asset.thumbnails.length).to.eq(0)",
                  "})",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "description": "bearer token",
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{token}}"
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "file",
                  "type": "file",
                  "src": "services/assets/browser-backend/tests/test-data/logo_YouWol_2020.png"
                }
              ],
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/api/assets-gateway/assets/{{abb#assets#assetId}}/images/logo_youwol.png",
              "host": [
                "{{host}}"
              ],
              "path": [
                "api",
                "assets-gateway",
                "assets",
                "{{abb#assets#assetId}}",
                "images",
                "logo_youwol.png"
              ]
            }
          },
          "response": []
        },
        {
          "name": "delete folder",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "description": "bearer token",
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{token}}"
              }
            ],
            "url": {
              "raw": "{{host}}/api/assets-gateway/tree/folders/{{abb#assets#folderId}}",
              "host": [
                "{{host}}"
              ],
              "path": [
                "api",
                "assets-gateway",
                "tree",
                "folders",
                "{{abb#assets#folderId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "purge drive",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"1 folders deleted, 1 items deleted\", function () {",
                  "    ",
                  "    let respJson= pm.response.json()",
                  "    pm.expect(respJson).to.have.property('foldersCount');",
                  "    pm.expect(respJson).to.have.property('itemsCount');",
                  "    pm.expect(respJson.foldersCount).to.equal(1)",
                  "    pm.expect(respJson.itemsCount).to.equal(1)",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "description": "bearer token",
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{token}}"
              }
            ],
            "url": {
              "raw": "{{host}}/api/assets-gateway/tree/drives/{{abb#assets#driveId}}/purge",
              "host": [
                "{{host}}"
              ],
              "path": [
                "api",
                "assets-gateway",
                "tree",
                "drives",
                "{{abb#assets#driveId}}",
                "purge"
              ]
            }
          },
          "response": []
        },
        {
          "name": "delete drive",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "description": "bearer token",
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"a\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/api/assets-gateway/tree/drives/{{abb#assets#driveId}}",
              "host": [
                "{{host}}"
              ],
              "path": [
                "api",
                "assets-gateway",
                "tree",
                "drives",
                "{{abb#assets#driveId}}"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "move",
      "item": [
        {
          "name": "flux-project",
          "item": [
            {
              "name": "log as anonymous",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var response_json = pm.response.json();\r",
                      "var token = response_json.access_token;\r",
                      "pm.collectionVariables.set('token', token);"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/x-www-form-urlencoded"
                  },
                  {
                    "key": "",
                    "type": "text",
                    "value": ""
                  }
                ],
                "body": {
                  "mode": "urlencoded",
                  "urlencoded": [
                    {
                      "key": "client_id",
                      "value": "{{clientId}}",
                      "type": "text"
                    },
                    {
                      "key": "grant_type",
                      "value": "client_credentials",
                      "type": "text"
                    },
                    {
                      "key": "client_secret",
                      "value": "{{clientSecret}}",
                      "type": "text"
                    }
                  ]
                },
                "url": {
                  "raw": "{{auth-url}}",
                  "host": [
                    "{{auth-url}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "groups",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"user has not '/youwol-users/postman-tester' group\", function () {",
                      "    let respJson= pm.response.json()",
                      "    pm.expect(respJson).to.have.property('groups');",
                      "    pm.expect(respJson.groups.filter( g => g.path== \"/youwol-users/postman-tester\").length).to.equal(0)",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "description": "bearer token",
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{token}}"
                  },
                  {
                    "description": "Used only in full-local conf.",
                    "key": "user-name",
                    "type": "text",
                    "value": "public"
                  }
                ],
                "url": {
                  "raw": "{{host}}/api/assets-gateway/groups",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "api",
                    "assets-gateway",
                    "groups"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "post drive",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"response contains expected attributes\", function () {",
                      "    ",
                      "    let respJson= pm.response.json()",
                      "    pm.collectionVariables.set('abb#move#flux-project#driveId', respJson.driveId)",
                      "})",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "description": "bearer token",
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{token}}"
                  },
                  {
                    "description": "Used only in full-local conf.",
                    "key": "user-name",
                    "type": "text",
                    "value": "public"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"name\": \"abb#exposed-group\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/api/assets-gateway/tree/groups/{{abb#public_group}}/drives",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "api",
                    "assets-gateway",
                    "tree",
                    "groups",
                    "{{abb#public_group}}",
                    "drives"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "create folder",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"response contains expected attributes\", function () {",
                      "    ",
                      "    let respJson= pm.response.json()",
                      "    pm.collectionVariables.set('abb#move#flux-project#folderId', respJson.folderId)",
                      "})",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "description": "bearer token",
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{token}}"
                  },
                  {
                    "description": "Used only in full-local conf.",
                    "key": "user-name",
                    "type": "text",
                    "value": "public"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"name\": \"folder-group\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/api/assets-gateway/tree/folders/{{abb#move#flux-project#driveId}}",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "api",
                    "assets-gateway",
                    "tree",
                    "folders",
                    "{{abb#move#flux-project#driveId}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "create_project",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"flux project located in expected drive/folder and of type 'flux-project'\", function () {",
                      "    ",
                      "    let respJson= pm.response.json()",
                      "    pm.expect(respJson).to.have.property('assetId');",
                      "    pm.expect(respJson).to.have.property('treeId');",
                      "    pm.expect(respJson).to.have.property('rawId');",
                      "    pm.expect(respJson).to.have.property('kind');",
                      "    pm.expect(respJson).to.have.property('groupId');",
                      "    pm.expect(respJson.kind).to.eq('flux-project')",
                      "    pm.collectionVariables.set(\"abb#move#flux-project#treeId\", respJson.treeId)",
                      "    pm.collectionVariables.set(\"abb#move#flux-project#rawId\", respJson.rawId)",
                      "})",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "description": "bearer token",
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{token}}"
                  },
                  {
                    "description": "Used only in full-local conf.",
                    "key": "user-name",
                    "type": "text",
                    "value": "public"
                  }
                ],
                "url": {
                  "raw": "{{host}}/api/assets-gateway/assets/flux-project/location/{{abb#move#flux-project#folderId}}",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "api",
                    "assets-gateway",
                    "assets",
                    "flux-project",
                    "location",
                    "{{abb#move#flux-project#folderId}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "get flux project content",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"flux project located in expected drive/folder and of type 'flux-project'\", function () {",
                      "    ",
                      "    let respJson= pm.response.json()",
                      "    pm.expect(respJson).to.have.property('name');",
                      "    pm.expect(respJson).to.have.property('requirements');",
                      "    pm.expect(respJson).to.have.property('workflow');",
                      "    pm.expect(respJson).to.have.property('builderRendering');",
                      "    pm.expect(respJson).to.have.property('runnerRendering');",
                      "    pm.expect(respJson.name).to.eq(pm.collectionVariables.get(\"abb#flux#new_project#fluxName\"));",
                      "})",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "description": "bearer token",
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{token}}"
                  },
                  {
                    "description": "Used only in full-local conf.",
                    "key": "user-name",
                    "type": "text",
                    "value": "public"
                  }
                ],
                "url": {
                  "raw": "{{host}}/api/assets-gateway/raw/flux-project/{{abb#move#flux-project#rawId}}",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "api",
                    "assets-gateway",
                    "raw",
                    "flux-project",
                    "{{abb#move#flux-project#rawId}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "log as test_account",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.collectionVariables.set('token', token);\r",
                      "\r",
                      "var response_json = pm.response.json();\r",
                      "var token = response_json.access_token;\r",
                      "pm.collectionVariables.set('token', token);\r",
                      "\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/x-www-form-urlencoded"
                  }
                ],
                "body": {
                  "mode": "urlencoded",
                  "urlencoded": [
                    {
                      "key": "username",
                      "value": "{{defaultUser}}",
                      "type": "text"
                    },
                    {
                      "key": "password",
                      "value": "{{password}}",
                      "type": "text"
                    },
                    {
                      "key": "client_id",
                      "value": "{{clientId}}",
                      "type": "text"
                    },
                    {
                      "key": "grant_type",
                      "value": "password",
                      "type": "text"
                    },
                    {
                      "key": "client_secret",
                      "value": "{{clientSecret}}",
                      "type": "text"
                    }
                  ]
                },
                "url": {
                  "raw": "{{auth-url}}",
                  "host": [
                    "{{auth-url}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "get flux project content",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"flux project located in expected drive/folder and of type 'flux-project'\", function () {",
                      "    ",
                      "    let respJson= pm.response.json()",
                      "    pm.expect(respJson).to.have.property('name');",
                      "    pm.expect(respJson).to.have.property('requirements');",
                      "    pm.expect(respJson).to.have.property('workflow');",
                      "    pm.expect(respJson).to.have.property('builderRendering');",
                      "    pm.expect(respJson).to.have.property('runnerRendering');",
                      "    pm.expect(respJson.name).to.eq(pm.collectionVariables.get(\"abb#flux#new_project#fluxName\"));",
                      "})",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "description": "bearer token",
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{token}}"
                  },
                  {
                    "description": "Used only in full-local conf.",
                    "key": "user-name",
                    "type": "text",
                    "value": "test"
                  }
                ],
                "url": {
                  "raw": "{{host}}/api/assets-gateway/raw/flux-project/{{abb#move#flux-project#rawId}}",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "api",
                    "assets-gateway",
                    "raw",
                    "flux-project",
                    "{{abb#move#flux-project#rawId}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "post drive dest in /youwol-users/youwol-devs",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"response contains expected attributes\", function () {",
                      "    ",
                      "    let respJson= pm.response.json()",
                      "    pm.collectionVariables.set('abb#move#flux-project#driveDestId', respJson.driveId)",
                      "})",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "description": "bearer token",
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{token}}"
                  },
                  {
                    "description": "Used only in full-local conf.",
                    "key": "user-name",
                    "type": "text",
                    "value": "test"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"name\": \"destination-drive\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/api/assets-gateway/tree/groups/{{abb#postman_group}}/drives",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "api",
                    "assets-gateway",
                    "tree",
                    "groups",
                    "{{abb#postman_group}}",
                    "drives"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "create folder destination",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"response contains expected attributes\", function () {",
                      "    ",
                      "    let respJson= pm.response.json()",
                      "    pm.collectionVariables.set('abb#move#flux-project#folderDestId', respJson.folderId)",
                      "})",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "description": "bearer token",
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{token}}"
                  },
                  {
                    "description": "Used only in full-local conf.",
                    "key": "user-name",
                    "type": "text",
                    "value": "test"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"name\": \"folder destination\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/api/assets-gateway/tree/folders/{{abb#move#flux-project#driveDestId}}",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "api",
                    "assets-gateway",
                    "tree",
                    "folders",
                    "{{abb#move#flux-project#driveDestId}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "move project",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"one item moved with correct properties\", function () {",
                      "    ",
                      "    let respJson= pm.response.json()",
                      "    pm.expect(respJson.items.length).to.eq(1);",
                      "    let item = respJson.items[0]",
                      "    pm.expect(item).to.have.property('assetId');",
                      "    pm.expect(item).to.have.property('rawId');",
                      "    pm.expect(item).to.have.property('kind');",
                      "    pm.expect(item).to.have.property('groupId');",
                      "    pm.expect(item.kind).to.eq('flux-project')",
                      "})",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "description": "bearer token",
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{token}}"
                  },
                  {
                    "description": "Used only in full-local conf.",
                    "key": "user-name",
                    "type": "text",
                    "value": "test"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"destinationFolderId\": \"{{abb#move#flux-project#folderDestId}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/api/assets-gateway/tree/{{abb#move#flux-project#treeId}}/move",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "api",
                    "assets-gateway",
                    "tree",
                    "{{abb#move#flux-project#treeId}}",
                    "move"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "get tree items destination",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"find drive-pack created\", function () {",
                      "    ",
                      "    let respJson= pm.response.json()",
                      "    pm.expect(respJson).to.have.property('items');",
                      "    let item = respJson.items[0]",
                      "    pm.expect(item).to.have.property('treeId')",
                      "    pm.expect(item).to.have.property('folderId')",
                      "    pm.expect(item).to.have.property('rawId')",
                      "    pm.expect(item).to.have.property('assetId')",
                      "    pm.expect(item).to.have.property('groupId')",
                      "    pm.expect(item.borrowed).to.eq(false);",
                      "    pm.expect(item.name).to.eq(\"new flux-project\");",
                      "    pm.expect(item.kind).to.eq(\"flux-project\");",
                      "})",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "description": "bearer token",
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{token}}"
                  },
                  {
                    "description": "Used only in full-local conf.",
                    "key": "user-name",
                    "type": "text",
                    "value": "test"
                  }
                ],
                "url": {
                  "raw": "{{host}}/api/assets-gateway/tree/folders/{{abb#move#flux-project#folderDestId}}/children",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "api",
                    "assets-gateway",
                    "tree",
                    "folders",
                    "{{abb#move#flux-project#folderDestId}}",
                    "children"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "get tree items origin",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"find drive-pack created\", function () {",
                      "    ",
                      "    let respJson= pm.response.json()",
                      "    pm.expect(respJson).to.have.property('items');",
                      "    pm.expect(respJson.items.length).to.eq(0)",
                      "})",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "description": "bearer token",
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{token}}"
                  },
                  {
                    "description": "Used only in full-local conf.",
                    "key": "user-name",
                    "type": "text",
                    "value": "test"
                  }
                ],
                "url": {
                  "raw": "{{host}}/api/assets-gateway/tree/folders/{{abb#move#flux-project#folderId}}/children",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "api",
                    "assets-gateway",
                    "tree",
                    "folders",
                    "{{abb#move#flux-project#folderId}}",
                    "children"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "get flux project content",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"flux project located in expected drive/folder and of type 'flux-project'\", function () {",
                      "    ",
                      "    let respJson= pm.response.json()",
                      "    pm.expect(respJson).to.have.property('name');",
                      "    pm.expect(respJson).to.have.property('requirements');",
                      "    pm.expect(respJson).to.have.property('workflow');",
                      "    pm.expect(respJson).to.have.property('builderRendering');",
                      "    pm.expect(respJson).to.have.property('runnerRendering');",
                      "    pm.expect(respJson.name).to.eq(pm.collectionVariables.get(\"abb#flux#new_project#fluxName\"));",
                      "})",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "description": "bearer token",
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{token}}"
                  },
                  {
                    "description": "Used only in full-local conf.",
                    "key": "user-name",
                    "type": "text",
                    "value": "test"
                  }
                ],
                "url": {
                  "raw": "{{host}}/api/assets-gateway/raw/flux-project/{{abb#move#flux-project#rawId}}",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "api",
                    "assets-gateway",
                    "raw",
                    "flux-project",
                    "{{abb#move#flux-project#rawId}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "log as anonymous",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var response_json = pm.response.json();\r",
                      "var token = response_json.access_token;\r",
                      "pm.collectionVariables.set('token', token);"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/x-www-form-urlencoded"
                  },
                  {
                    "key": "",
                    "type": "text",
                    "value": ""
                  }
                ],
                "body": {
                  "mode": "urlencoded",
                  "urlencoded": [
                    {
                      "key": "client_id",
                      "value": "{{clientId}}",
                      "type": "text"
                    },
                    {
                      "key": "grant_type",
                      "value": "client_credentials",
                      "type": "text"
                    },
                    {
                      "key": "client_secret",
                      "value": "{{clientSecret}}",
                      "type": "text"
                    }
                  ]
                },
                "url": {
                  "raw": "{{auth-url}}",
                  "host": [
                    "{{auth-url}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "get flux project content - 404",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "/*pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});*/",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "description": "bearer token",
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{token}}"
                  },
                  {
                    "description": "Used only in full-local conf.",
                    "key": "user-name",
                    "type": "text",
                    "value": "public"
                  }
                ],
                "url": {
                  "raw": "{{host}}/api/assets-gateway/raw/flux-project/{{abb#move#flux-project#rawId}}",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "api",
                    "assets-gateway",
                    "raw",
                    "flux-project",
                    "{{abb#move#flux-project#rawId}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "log as test_account",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.collectionVariables.set('token', token);\r",
                      "\r",
                      "var response_json = pm.response.json();\r",
                      "var token = response_json.access_token;\r",
                      "pm.collectionVariables.set('token', token);\r",
                      "\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/x-www-form-urlencoded"
                  }
                ],
                "body": {
                  "mode": "urlencoded",
                  "urlencoded": [
                    {
                      "key": "username",
                      "value": "{{defaultUser}}",
                      "type": "text"
                    },
                    {
                      "key": "password",
                      "value": "{{password}}",
                      "type": "text"
                    },
                    {
                      "key": "client_id",
                      "value": "{{clientId}}",
                      "type": "text"
                    },
                    {
                      "key": "grant_type",
                      "value": "password",
                      "type": "text"
                    },
                    {
                      "key": "client_secret",
                      "value": "{{clientSecret}}",
                      "type": "text"
                    }
                  ]
                },
                "url": {
                  "raw": "{{auth-url}}",
                  "host": [
                    "{{auth-url}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "delete folder",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "DELETE",
                "header": [
                  {
                    "description": "bearer token",
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{token}}"
                  },
                  {
                    "description": "Used only in full-local conf.",
                    "key": "user-name",
                    "type": "text",
                    "value": "test"
                  }
                ],
                "url": {
                  "raw": "{{host}}/api/assets-gateway/tree/folders/{{abb#move#flux-project#folderId}}",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "api",
                    "assets-gateway",
                    "tree",
                    "folders",
                    "{{abb#move#flux-project#folderId}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "delete folder dest",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "DELETE",
                "header": [
                  {
                    "description": "bearer token",
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{token}}"
                  },
                  {
                    "description": "Used only in full-local conf.",
                    "key": "user-name",
                    "type": "text",
                    "value": "test"
                  }
                ],
                "url": {
                  "raw": "{{host}}/api/assets-gateway/tree/folders/{{abb#move#flux-project#folderDestId}}",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "api",
                    "assets-gateway",
                    "tree",
                    "folders",
                    "{{abb#move#flux-project#folderDestId}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "purge drive",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"1 folders deleted, 1 items deleted\", function () {",
                      "    ",
                      "    let respJson= pm.response.json()",
                      "    pm.expect(respJson).to.have.property('foldersCount');",
                      "    pm.expect(respJson).to.have.property('itemsCount');",
                      "    pm.expect(respJson.foldersCount).to.equal(1)",
                      "    pm.expect(respJson.itemsCount).to.equal(0)",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "DELETE",
                "header": [
                  {
                    "description": "bearer token",
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{token}}"
                  },
                  {
                    "description": "Used only in full-local conf.",
                    "key": "user-name",
                    "type": "text",
                    "value": "test"
                  }
                ],
                "url": {
                  "raw": "{{host}}/api/assets-gateway/tree/drives/{{abb#move#flux-project#driveId}}/purge",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "api",
                    "assets-gateway",
                    "tree",
                    "drives",
                    "{{abb#move#flux-project#driveId}}",
                    "purge"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "purge drive dest",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"1 folders deleted, 1 items deleted\", function () {",
                      "    ",
                      "    let respJson= pm.response.json()",
                      "    pm.expect(respJson).to.have.property('foldersCount');",
                      "    pm.expect(respJson).to.have.property('itemsCount');",
                      "    pm.expect(respJson.foldersCount).to.equal(1)",
                      "    pm.expect(respJson.itemsCount).to.equal(1)",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "DELETE",
                "header": [
                  {
                    "description": "bearer token",
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{token}}"
                  },
                  {
                    "description": "Used only in full-local conf.",
                    "key": "user-name",
                    "type": "text",
                    "value": "test"
                  }
                ],
                "url": {
                  "raw": "{{host}}/api/assets-gateway/tree/drives/{{abb#move#flux-project#driveDestId}}/purge",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "api",
                    "assets-gateway",
                    "tree",
                    "drives",
                    "{{abb#move#flux-project#driveDestId}}",
                    "purge"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "delete drive",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "DELETE",
                "header": [
                  {
                    "description": "bearer token",
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{token}}"
                  },
                  {
                    "description": "Used only in full-local conf.",
                    "key": "user-name",
                    "type": "text",
                    "value": "test"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"name\": \"a\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/api/assets-gateway/tree/drives/{{abb#move#flux-project#driveId}}",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "api",
                    "assets-gateway",
                    "tree",
                    "drives",
                    "{{abb#move#flux-project#driveId}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "delete drive dest",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "DELETE",
                "header": [
                  {
                    "description": "bearer token",
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{token}}"
                  },
                  {
                    "description": "Used only in full-local conf.",
                    "key": "user-name",
                    "type": "text",
                    "value": "test"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"name\": \"a\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/api/assets-gateway/tree/drives/{{abb#move#flux-project#driveDestId}}",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "api",
                    "assets-gateway",
                    "tree",
                    "drives",
                    "{{abb#move#flux-project#driveDestId}}"
                  ]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "data",
          "item": [
            {
              "name": "log as anonymous",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var response_json = pm.response.json();\r",
                      "var token = response_json.access_token;\r",
                      "pm.collectionVariables.set('token', token);"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/x-www-form-urlencoded"
                  },
                  {
                    "key": "",
                    "type": "text",
                    "value": ""
                  }
                ],
                "body": {
                  "mode": "urlencoded",
                  "urlencoded": [
                    {
                      "key": "client_id",
                      "value": "{{clientId}}",
                      "type": "text"
                    },
                    {
                      "key": "grant_type",
                      "value": "client_credentials",
                      "type": "text"
                    },
                    {
                      "key": "client_secret",
                      "value": "{{clientSecret}}",
                      "type": "text"
                    }
                  ]
                },
                "url": {
                  "raw": "{{auth-url}}",
                  "host": [
                    "{{auth-url}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "groups",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"user has not '/youwol-users/postman-tester' group\", function () {",
                      "    let respJson= pm.response.json()",
                      "    pm.expect(respJson).to.have.property('groups');",
                      "    pm.expect(respJson.groups.filter( g => g.path== \"/youwol-users/postman-tester\").length).to.equal(0)",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "description": "bearer token",
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{token}}"
                  },
                  {
                    "description": "Used only in full-local conf.",
                    "key": "user-name",
                    "type": "text",
                    "value": "public"
                  }
                ],
                "url": {
                  "raw": "{{host}}/api/assets-gateway/groups",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "api",
                    "assets-gateway",
                    "groups"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "post drive",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"response contains expected attributes\", function () {",
                      "    ",
                      "    let respJson= pm.response.json()",
                      "    pm.collectionVariables.set('abb#move#data#driveId', respJson.driveId)",
                      "})",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "description": "bearer token",
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{token}}"
                  },
                  {
                    "description": "Used only in full-local conf.",
                    "key": "user-name",
                    "type": "text",
                    "value": "public"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"name\": \"abb#exposed-group\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/api/assets-gateway/tree/groups/{{abb#public_group}}/drives",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "api",
                    "assets-gateway",
                    "tree",
                    "groups",
                    "{{abb#public_group}}",
                    "drives"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "create folder",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"response contains expected attributes\", function () {",
                      "    ",
                      "    let respJson= pm.response.json()",
                      "    pm.collectionVariables.set('abb#move#data#folderId', respJson.folderId)",
                      "})",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "description": "bearer token",
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{token}}"
                  },
                  {
                    "description": "Used only in full-local conf.",
                    "key": "user-name",
                    "type": "text",
                    "value": "public"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"name\": \"folder-group\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/api/assets-gateway/tree/folders/{{abb#move#data#driveId}}",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "api",
                    "assets-gateway",
                    "tree",
                    "folders",
                    "{{abb#move#data#driveId}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "add data",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"expected asset attributes are returned\", function () {",
                      "    let respJson= pm.response.json()",
                      "    let asset = respJson",
                      "    pm.expect(asset).to.have.property(\"assetId\")",
                      "    pm.expect(asset).to.have.property(\"kind\")",
                      "    pm.expect(asset).to.have.property(\"name\")",
                      "    pm.expect(asset).to.have.property(\"rawId\")",
                      "    pm.expect(asset).to.have.property(\"groupId\")",
                      "    pm.expect(asset).to.have.property(\"tags\")   ",
                      "",
                      "    pm.expect(asset.name).to.eq('logo_YouWol_2020.png') ",
                      "    pm.expect(asset.kind).to.eq('data') ",
                      "    pm.collectionVariables.set('abb#move#data#rawId', respJson.rawId)",
                      "    pm.collectionVariables.set('abb#move#data#treeId', respJson.treeId)",
                      "})",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "description": "bearer token",
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{token}}"
                  },
                  {
                    "description": "Used only in full-local conf.",
                    "key": "user-name",
                    "type": "text",
                    "value": "test"
                  }
                ],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "file",
                      "type": "file",
                      "src": "services/assets-gateway/tests/test-data/logo_YouWol_2020.png"
                    }
                  ],
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/api/assets-gateway/assets/data/location/{{abb#move#data#folderId}}",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "api",
                    "assets-gateway",
                    "assets",
                    "data",
                    "location",
                    "{{abb#move#data#folderId}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "get data content",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"flux project located in expected drive/folder and of type 'flux-project'\", function () {",
                      "    pm.expect(pm.response.headers.get('content-type')).to.eq('image/png')",
                      "    pm.expect(pm.response.headers.get('content-encoding')).to.eq('')",
                      "})",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "description": "bearer token",
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{token}}"
                  },
                  {
                    "description": "Used only in full-local conf.",
                    "key": "user-name",
                    "type": "text",
                    "value": "public"
                  }
                ],
                "url": {
                  "raw": "{{host}}/api/assets-gateway/raw/data/{{abb#move#data#rawId}}",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "api",
                    "assets-gateway",
                    "raw",
                    "data",
                    "{{abb#move#data#rawId}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "log as test_account",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.collectionVariables.set('token', token);\r",
                      "\r",
                      "var response_json = pm.response.json();\r",
                      "var token = response_json.access_token;\r",
                      "pm.collectionVariables.set('token', token);\r",
                      "\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/x-www-form-urlencoded"
                  }
                ],
                "body": {
                  "mode": "urlencoded",
                  "urlencoded": [
                    {
                      "key": "username",
                      "value": "{{defaultUser}}",
                      "type": "text"
                    },
                    {
                      "key": "password",
                      "value": "{{password}}",
                      "type": "text"
                    },
                    {
                      "key": "client_id",
                      "value": "{{clientId}}",
                      "type": "text"
                    },
                    {
                      "key": "grant_type",
                      "value": "password",
                      "type": "text"
                    },
                    {
                      "key": "client_secret",
                      "value": "{{clientSecret}}",
                      "type": "text"
                    }
                  ]
                },
                "url": {
                  "raw": "{{auth-url}}",
                  "host": [
                    "{{auth-url}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "get data content",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"flux project located in expected drive/folder and of type 'flux-project'\", function () {",
                      "    pm.expect(pm.response.headers.get('content-type')).to.eq('image/png')",
                      "    pm.expect(pm.response.headers.get('content-encoding')).to.eq('')",
                      "})",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "description": "bearer token",
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{token}}"
                  },
                  {
                    "description": "Used only in full-local conf.",
                    "key": "user-name",
                    "type": "text",
                    "value": "test"
                  }
                ],
                "url": {
                  "raw": "{{host}}/api/assets-gateway/raw/data/{{abb#move#data#rawId}}",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "api",
                    "assets-gateway",
                    "raw",
                    "data",
                    "{{abb#move#data#rawId}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "post drive dest in /youwol-users/youwol-devs",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"response contains expected attributes\", function () {",
                      "    ",
                      "    let respJson= pm.response.json()",
                      "    pm.collectionVariables.set('abb#move#data#driveDestId', respJson.driveId)",
                      "})",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "description": "bearer token",
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{token}}"
                  },
                  {
                    "description": "Used only in full-local conf.",
                    "key": "user-name",
                    "type": "text",
                    "value": "test"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"name\": \"destination-drive\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/api/assets-gateway/tree/groups/{{abb#postman_group}}/drives",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "api",
                    "assets-gateway",
                    "tree",
                    "groups",
                    "{{abb#postman_group}}",
                    "drives"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "create folder destination",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"response contains expected attributes\", function () {",
                      "    ",
                      "    let respJson= pm.response.json()",
                      "    pm.collectionVariables.set('abb#move#data#folderDestId', respJson.folderId)",
                      "})",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "description": "bearer token",
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{token}}"
                  },
                  {
                    "description": "Used only in full-local conf.",
                    "key": "user-name",
                    "type": "text",
                    "value": "test"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"name\": \"folder destination\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/api/assets-gateway/tree/folders/{{abb#move#data#driveDestId}}",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "api",
                    "assets-gateway",
                    "tree",
                    "folders",
                    "{{abb#move#data#driveDestId}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "move data",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"one item moved with correct properties\", function () {",
                      "    ",
                      "    let respJson= pm.response.json()",
                      "    pm.expect(respJson.items.length).to.eq(1);",
                      "    let item = respJson.items[0]",
                      "    pm.expect(item).to.have.property('assetId');",
                      "    pm.expect(item).to.have.property('rawId');",
                      "    pm.expect(item).to.have.property('kind');",
                      "    pm.expect(item).to.have.property('groupId');",
                      "    pm.expect(item.kind).to.eq('data')",
                      "})",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "description": "bearer token",
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{token}}"
                  },
                  {
                    "description": "Used only in full-local conf.",
                    "key": "user-name",
                    "type": "text",
                    "value": "test"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"destinationFolderId\": \"{{abb#move#data#folderDestId}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/api/assets-gateway/tree/{{abb#move#data#treeId}}/move",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "api",
                    "assets-gateway",
                    "tree",
                    "{{abb#move#data#treeId}}",
                    "move"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "get tree items destination",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"find drive-pack created\", function () {",
                      "    ",
                      "    let respJson= pm.response.json()",
                      "    pm.expect(respJson).to.have.property('items');",
                      "    let item = respJson.items[0]",
                      "    pm.expect(item).to.have.property('treeId')",
                      "    pm.expect(item).to.have.property('folderId')",
                      "    pm.expect(item).to.have.property('rawId')",
                      "    pm.expect(item).to.have.property('assetId')",
                      "    pm.expect(item).to.have.property('groupId')",
                      "    pm.expect(item.borrowed).to.eq(false);",
                      "    pm.expect(item.name).to.eq(\"logo_YouWol_2020.png\");",
                      "    pm.expect(item.kind).to.eq(\"data\");",
                      "})",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "description": "bearer token",
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{token}}"
                  },
                  {
                    "description": "Used only in full-local conf.",
                    "key": "user-name",
                    "type": "text",
                    "value": "test"
                  }
                ],
                "url": {
                  "raw": "{{host}}/api/assets-gateway/tree/folders/{{abb#move#data#folderDestId}}/children",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "api",
                    "assets-gateway",
                    "tree",
                    "folders",
                    "{{abb#move#data#folderDestId}}",
                    "children"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "get tree items origin",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"find drive-pack created\", function () {",
                      "    ",
                      "    let respJson= pm.response.json()",
                      "    pm.expect(respJson).to.have.property('items');",
                      "    pm.expect(respJson.items.length).to.eq(0)",
                      "})",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "description": "bearer token",
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{token}}"
                  },
                  {
                    "description": "Used only in full-local conf.",
                    "key": "user-name",
                    "type": "text",
                    "value": "test"
                  }
                ],
                "url": {
                  "raw": "{{host}}/api/assets-gateway/tree/folders/{{abb#move#data#folderId}}/children",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "api",
                    "assets-gateway",
                    "tree",
                    "folders",
                    "{{abb#move#data#folderId}}",
                    "children"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "get data",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "description": "bearer token",
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{token}}"
                  },
                  {
                    "description": "Used only in full-local conf.",
                    "key": "user-name",
                    "type": "text",
                    "value": "test"
                  }
                ],
                "url": {
                  "raw": "{{host}}/api/assets-gateway/raw/data/{{abb#move#data#rawId}}",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "api",
                    "assets-gateway",
                    "raw",
                    "data",
                    "{{abb#move#data#rawId}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "log as anonymous",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var response_json = pm.response.json();\r",
                      "var token = response_json.access_token;\r",
                      "pm.collectionVariables.set('token', token);"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/x-www-form-urlencoded"
                  },
                  {
                    "key": "",
                    "type": "text",
                    "value": ""
                  }
                ],
                "body": {
                  "mode": "urlencoded",
                  "urlencoded": [
                    {
                      "key": "client_id",
                      "value": "{{clientId}}",
                      "type": "text"
                    },
                    {
                      "key": "grant_type",
                      "value": "client_credentials",
                      "type": "text"
                    },
                    {
                      "key": "client_secret",
                      "value": "{{clientSecret}}",
                      "type": "text"
                    }
                  ]
                },
                "url": {
                  "raw": "{{auth-url}}",
                  "host": [
                    "{{auth-url}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "get data - 404",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "/*pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});*/",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "description": "bearer token",
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{token}}"
                  },
                  {
                    "description": "Used only in full-local conf.",
                    "key": "user-name",
                    "type": "text",
                    "value": "public"
                  }
                ],
                "url": {
                  "raw": "{{host}}/api/assets-gateway/raw/data/{{abb#move#data#rawId}}",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "api",
                    "assets-gateway",
                    "raw",
                    "data",
                    "{{abb#move#data#rawId}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "log as test_account",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.collectionVariables.set('token', token);\r",
                      "\r",
                      "var response_json = pm.response.json();\r",
                      "var token = response_json.access_token;\r",
                      "pm.collectionVariables.set('token', token);\r",
                      "\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/x-www-form-urlencoded"
                  }
                ],
                "body": {
                  "mode": "urlencoded",
                  "urlencoded": [
                    {
                      "key": "username",
                      "value": "{{defaultUser}}",
                      "type": "text"
                    },
                    {
                      "key": "password",
                      "value": "{{password}}",
                      "type": "text"
                    },
                    {
                      "key": "client_id",
                      "value": "{{clientId}}",
                      "type": "text"
                    },
                    {
                      "key": "grant_type",
                      "value": "password",
                      "type": "text"
                    },
                    {
                      "key": "client_secret",
                      "value": "{{clientSecret}}",
                      "type": "text"
                    }
                  ]
                },
                "url": {
                  "raw": "{{auth-url}}",
                  "host": [
                    "{{auth-url}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "delete folder",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "DELETE",
                "header": [
                  {
                    "description": "bearer token",
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{token}}"
                  },
                  {
                    "description": "Used only in full-local conf.",
                    "key": "user-name",
                    "type": "text",
                    "value": "test"
                  }
                ],
                "url": {
                  "raw": "{{host}}/api/assets-gateway/tree/folders/{{abb#move#data#folderId}}",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "api",
                    "assets-gateway",
                    "tree",
                    "folders",
                    "{{abb#move#data#folderId}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "delete folder dest",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "DELETE",
                "header": [
                  {
                    "description": "bearer token",
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{token}}"
                  },
                  {
                    "description": "Used only in full-local conf.",
                    "key": "user-name",
                    "type": "text",
                    "value": "test"
                  }
                ],
                "url": {
                  "raw": "{{host}}/api/assets-gateway/tree/folders/{{abb#move#data#folderDestId}}",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "api",
                    "assets-gateway",
                    "tree",
                    "folders",
                    "{{abb#move#data#folderDestId}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "purge drive",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"1 folders deleted, 1 items deleted\", function () {",
                      "    ",
                      "    let respJson= pm.response.json()",
                      "    pm.expect(respJson).to.have.property('foldersCount');",
                      "    pm.expect(respJson).to.have.property('itemsCount');",
                      "    pm.expect(respJson.foldersCount).to.equal(1)",
                      "    pm.expect(respJson.itemsCount).to.equal(0)",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "DELETE",
                "header": [
                  {
                    "description": "bearer token",
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{token}}"
                  },
                  {
                    "description": "Used only in full-local conf.",
                    "key": "user-name",
                    "type": "text",
                    "value": "test"
                  }
                ],
                "url": {
                  "raw": "{{host}}/api/assets-gateway/tree/drives/{{abb#move#data#driveId}}/purge",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "api",
                    "assets-gateway",
                    "tree",
                    "drives",
                    "{{abb#move#data#driveId}}",
                    "purge"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "purge drive dest",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"1 folders deleted, 1 items deleted\", function () {",
                      "    ",
                      "    let respJson= pm.response.json()",
                      "    pm.expect(respJson).to.have.property('foldersCount');",
                      "    pm.expect(respJson).to.have.property('itemsCount');",
                      "    pm.expect(respJson.foldersCount).to.equal(1)",
                      "    pm.expect(respJson.itemsCount).to.equal(1)",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "DELETE",
                "header": [
                  {
                    "description": "bearer token",
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{token}}"
                  },
                  {
                    "description": "Used only in full-local conf.",
                    "key": "user-name",
                    "type": "text",
                    "value": "test"
                  }
                ],
                "url": {
                  "raw": "{{host}}/api/assets-gateway/tree/drives/{{abb#move#data#driveDestId}}/purge",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "api",
                    "assets-gateway",
                    "tree",
                    "drives",
                    "{{abb#move#data#driveDestId}}",
                    "purge"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "delete drive",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "DELETE",
                "header": [
                  {
                    "description": "bearer token",
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{token}}"
                  },
                  {
                    "description": "Used only in full-local conf.",
                    "key": "user-name",
                    "type": "text",
                    "value": "test"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"name\": \"a\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/api/assets-gateway/tree/drives/{{abb#move#data#driveId}}",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "api",
                    "assets-gateway",
                    "tree",
                    "drives",
                    "{{abb#move#data#driveId}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "delete drive dest",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "DELETE",
                "header": [
                  {
                    "description": "bearer token",
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{token}}"
                  },
                  {
                    "description": "Used only in full-local conf.",
                    "key": "user-name",
                    "type": "text",
                    "value": "test"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"name\": \"a\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/api/assets-gateway/tree/drives/{{abb#move#data#driveDestId}}",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "api",
                    "assets-gateway",
                    "tree",
                    "drives",
                    "{{abb#move#data#driveDestId}}"
                  ]
                }
              },
              "response": []
            }
          ]
        }
      ]
    },
    {
      "name": "permissions",
      "item": [
        {
          "name": "log as test_account",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "var response_json = pm.response.json();\r",
                  "var token = response_json.access_token;\r",
                  "pm.collectionVariables.set('token', token);\r",
                  "\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "name": "Content-Type",
                "type": "text",
                "value": "application/x-www-form-urlencoded"
              }
            ],
            "body": {
              "mode": "urlencoded",
              "urlencoded": [
                {
                  "key": "username",
                  "value": "{{defaultUser}}",
                  "type": "text"
                },
                {
                  "key": "password",
                  "value": "{{password}}",
                  "type": "text"
                },
                {
                  "key": "client_id",
                  "value": "{{clientId}}",
                  "type": "text"
                },
                {
                  "key": "grant_type",
                  "value": "password",
                  "type": "text"
                },
                {
                  "key": "client_secret",
                  "value": "{{clientSecret}}",
                  "type": "text"
                }
              ]
            },
            "url": {
              "raw": "{{auth-url}}",
              "host": [
                "{{auth-url}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "post drive",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"response contains expected attributes\", function () {",
                  "    ",
                  "    let respJson= pm.response.json()",
                  "    pm.expect(respJson).to.have.property('driveId');",
                  "    pm.expect(respJson).to.have.property('name');",
                  "    pm.collectionVariables.set('abb#permissions#driveId', respJson.driveId)",
                  "})",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "description": "bearer token",
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{token}}"
              },
              {
                "description": "Used only in full-local conf.",
                "key": "user-name",
                "type": "text",
                "value": "test"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"abb#flux#new-project\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/api/assets-gateway/tree/groups/{{abb#postman_group}}/drives",
              "host": [
                "{{host}}"
              ],
              "path": [
                "api",
                "assets-gateway",
                "tree",
                "groups",
                "{{abb#postman_group}}",
                "drives"
              ]
            }
          },
          "response": []
        },
        {
          "name": "post drive borrowing in /youwol-users",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"response contains expected attributes\", function () {",
                  "    ",
                  "    let respJson= pm.response.json()",
                  "    pm.expect(respJson).to.have.property('driveId');",
                  "    pm.expect(respJson).to.have.property('name');",
                  "    pm.collectionVariables.set('abb#permissions#borrowingDriveId', respJson.driveId)",
                  "})",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "description": "bearer token",
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{token}}"
              },
              {
                "description": "Used only in full-local conf.",
                "key": "user-name",
                "type": "text",
                "value": "test"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"borrowing drive\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/api/assets-gateway/tree/groups/{{abb#public_group}}/drives",
              "host": [
                "{{host}}"
              ],
              "path": [
                "api",
                "assets-gateway",
                "tree",
                "groups",
                "{{abb#public_group}}",
                "drives"
              ]
            }
          },
          "response": []
        },
        {
          "name": "create_project",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"flux project located in expected drive/folder and of type 'flux-project'\", function () {",
                  "    ",
                  "    let respJson= pm.response.json()",
                  "    pm.expect(respJson).to.have.property('assetId');",
                  "    pm.expect(respJson).to.have.property('rawId');",
                  "    pm.expect(respJson).to.have.property('kind');",
                  "    pm.expect(respJson).to.have.property('groupId');",
                  "    pm.expect(respJson.kind).to.eq('flux-project')",
                  "    ",
                  "    pm.collectionVariables.set('abb#permissions#assetId', respJson.assetId)",
                  "    pm.collectionVariables.set('abb#permissions#fluxProjectId', respJson.rawId)",
                  "    pm.collectionVariables.set('abb#permissions#treeId', respJson.treeId)",
                  "})",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "description": "bearer token",
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{token}}"
              },
              {
                "description": "Used only in full-local conf.",
                "key": "user-name",
                "type": "text",
                "value": "test"
              }
            ],
            "url": {
              "raw": "{{host}}/api/assets-gateway/assets/flux-project/location/{{abb#permissions#driveId}}",
              "host": [
                "{{host}}"
              ],
              "path": [
                "api",
                "assets-gateway",
                "assets",
                "flux-project",
                "location",
                "{{abb#permissions#driveId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "borrow",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"flux project located in expected drive/folder and of type 'flux-project'\", function () {",
                  "    ",
                  "    let respJson= pm.response.json()",
                  "    pm.expect(respJson).to.have.property('assetId');",
                  "    pm.expect(respJson).to.have.property('rawId');",
                  "    pm.expect(respJson).to.have.property('kind');",
                  "    pm.expect(respJson).to.have.property('groupId');",
                  "    pm.expect(respJson.kind).to.eq('flux-project')",
                  "    pm.expect(respJson.borrowed).to.eq(true)",
                  "    pm.expect(respJson.rawId).to.eq(pm.collectionVariables.get(\"abb#permissions#fluxProjectId\"))",
                  "    pm.expect(respJson.assetId).to.eq(pm.collectionVariables.get(\"abb#permissions#assetId\"))",
                  "    pm.collectionVariables.set('abb#permissions#borrowedTreeId', respJson.treeId)",
                  "",
                  "    ",
                  "})",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "description": "bearer token",
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{token}}"
              },
              {
                "description": "Used only in full-local conf.",
                "key": "user-name",
                "type": "text",
                "value": "test"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"destinationFolderId\": \"{{abb#permissions#borrowingDriveId}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/api/assets-gateway/tree/{{abb#permissions#treeId}}/borrow",
              "host": [
                "{{host}}"
              ],
              "path": [
                "api",
                "assets-gateway",
                "tree",
                "{{abb#permissions#treeId}}",
                "borrow"
              ]
            }
          },
          "response": []
        },
        {
          "name": "get flux asset by assetId",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"flux project located in expected drive/folder and of type 'flux-project'\", function () {",
                  "    ",
                  "    let respJson= pm.response.json()",
                  "    pm.expect(respJson).to.have.property('assetId');",
                  "    pm.expect(respJson).to.have.property('kind');",
                  "    pm.expect(respJson).to.have.property('rawId');",
                  "    pm.expect(respJson).to.have.property('name');",
                  "    pm.expect(respJson.assetId).to.eq(pm.collectionVariables.get(\"abb#permissions#assetId\"));",
                  "    pm.expect(respJson.rawId).to.eq(pm.collectionVariables.get(\"abb#permissions#fluxProjectId\"));",
                  "    pm.expect(respJson.groupId).to.eq(pm.collectionVariables.get(\"abb#postman_group\"));",
                  "})",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "description": "bearer token",
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{token}}"
              },
              {
                "description": "Used only in full-local conf.",
                "key": "user-name",
                "type": "text",
                "value": "test"
              }
            ],
            "url": {
              "raw": "{{host}}/api/assets-gateway/assets/{{abb#permissions#assetId}}",
              "host": [
                "{{host}}"
              ],
              "path": [
                "api",
                "assets-gateway",
                "assets",
                "{{abb#permissions#assetId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "permission",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"permissions\", function () {",
                  "    ",
                  "    let respJson= pm.response.json()",
                  "    pm.expect(respJson.read).to.eq(true);",
                  "    pm.expect(respJson.write).to.eq(true);",
                  "    pm.expect(respJson.expiration).to.eq(null);",
                  "})",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "description": "bearer token",
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{token}}"
              },
              {
                "description": "Used only in full-local conf.",
                "key": "user-name",
                "type": "text",
                "value": "test"
              }
            ],
            "url": {
              "raw": "{{host}}/api/assets-gateway/tree/{{abb#permissions#treeId}}/permissions",
              "host": [
                "{{host}}"
              ],
              "path": [
                "api",
                "assets-gateway",
                "tree",
                "{{abb#permissions#treeId}}",
                "permissions"
              ]
            }
          },
          "response": []
        },
        {
          "name": "access-info",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"access info for owner with borrowed in /youwol-users\", function () {",
                  "    ",
                  "    let respJson= pm.response.json()",
                  "    pm.expect(respJson).to.have.property(\"owningGroup\");",
                  "    pm.expect(respJson.owningGroup.name).to.eq(\"/youwol-users/postman-tester\");",
                  "",
                  "    pm.expect(respJson).to.have.property(\"ownerInfo\");",
                  "",
                  "    pm.expect(respJson.ownerInfo.exposingGroups.length).to.eq(1);",
                  "    ",
                  "    pm.expect(respJson.ownerInfo.defaultAccess.read).to.eq(\"forbidden\");",
                  "    pm.expect(respJson.ownerInfo.defaultAccess.share).to.eq(\"forbidden\");",
                  "",
                  "    pm.expect(respJson.ownerInfo.exposingGroups.length).to.eq(1);",
                  "    pm.expect(respJson.ownerInfo.exposingGroups[0].name).to.eq(\"/youwol-users\");",
                  "    pm.expect(respJson.ownerInfo.exposingGroups[0].access.read).to.eq(\"forbidden\");",
                  "    pm.expect(respJson.ownerInfo.exposingGroups[0].access.share).to.eq(\"forbidden\");",
                  "",
                  "    pm.expect(respJson.consumerInfo.permissions.read).to.eq(true);",
                  "    pm.expect(respJson.consumerInfo.permissions.write).to.eq(true);",
                  "    pm.expect(respJson.consumerInfo.permissions.expiration).to.eq(null);",
                  "})",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "description": "bearer token",
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{token}}"
              },
              {
                "description": "Used only in full-local conf.",
                "key": "user-name",
                "type": "text",
                "value": "test"
              }
            ],
            "url": {
              "raw": "{{host}}/api/assets-gateway/assets/{{abb#permissions#assetId}}/access",
              "host": [
                "{{host}}"
              ],
              "path": [
                "api",
                "assets-gateway",
                "assets",
                "{{abb#permissions#assetId}}",
                "access"
              ]
            }
          },
          "response": []
        },
        {
          "name": "get flux project content",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"flux project located in expected drive/folder and of type 'flux-project'\", function () {",
                  "    ",
                  "    let respJson= pm.response.json()",
                  "    pm.expect(respJson).to.have.property('name');",
                  "    pm.expect(respJson).to.have.property('requirements');",
                  "    pm.expect(respJson).to.have.property('workflow');",
                  "    pm.expect(respJson).to.have.property('builderRendering');",
                  "    pm.expect(respJson).to.have.property('runnerRendering');",
                  "    pm.expect(respJson.name).to.eq(pm.collectionVariables.get(\"abb#flux#new_project#fluxName\"));",
                  "})",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "description": "bearer token",
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{token}}"
              },
              {
                "description": "Used only in full-local conf.",
                "key": "user-name",
                "type": "text",
                "value": "test"
              }
            ],
            "url": {
              "raw": "{{host}}/api/assets-gateway/raw/flux-project/{{abb#permissions#fluxProjectId}}",
              "host": [
                "{{host}}"
              ],
              "path": [
                "api",
                "assets-gateway",
                "raw",
                "flux-project",
                "{{abb#permissions#fluxProjectId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "log as anonymous",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "var response_json = pm.response.json();\r",
                  "var token = response_json.access_token;\r",
                  "pm.collectionVariables.set('token', token);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "name": "Content-Type",
                "type": "text",
                "value": "application/x-www-form-urlencoded"
              },
              {
                "key": "",
                "type": "text",
                "value": ""
              }
            ],
            "body": {
              "mode": "urlencoded",
              "urlencoded": [
                {
                  "key": "client_id",
                  "value": "{{clientId}}",
                  "type": "text"
                },
                {
                  "key": "grant_type",
                  "value": "client_credentials",
                  "type": "text"
                },
                {
                  "key": "client_secret",
                  "value": "{{clientSecret}}",
                  "type": "text"
                }
              ]
            },
            "url": {
              "raw": "{{auth-url}}",
              "host": [
                "{{auth-url}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "permission => 404",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 404\", function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "description": "bearer token",
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{token}}"
              },
              {
                "description": "Used only in full-local conf.",
                "key": "user-name",
                "type": "text",
                "value": "public"
              }
            ],
            "url": {
              "raw": "{{host}}/api/assets-gateway/tree/{{abb#permissions#treeId}}/permissions",
              "host": [
                "{{host}}"
              ],
              "path": [
                "api",
                "assets-gateway",
                "tree",
                "{{abb#permissions#treeId}}",
                "permissions"
              ]
            }
          },
          "response": []
        },
        {
          "name": "access-info => no access",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"access info for owner with borrowed in /youwol-users\", function () {",
                  "    ",
                  "    let respJson= pm.response.json()",
                  "    pm.expect(respJson).to.have.property(\"owningGroup\");",
                  "    pm.expect(respJson.owningGroup.name).to.eq(\"/youwol-users/postman-tester\");",
                  "",
                  "    pm.expect(respJson.ownerInfo).to.eq(null);",
                  "    pm.expect(respJson.consumerInfo.permissions.read).to.eq(false);",
                  "    pm.expect(respJson.consumerInfo.permissions.write).to.eq(false);",
                  "    pm.expect(respJson.consumerInfo.permissions.expiration).to.eq(null);",
                  "})",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "description": "bearer token",
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{token}}"
              },
              {
                "description": "Used only in full-local conf.",
                "key": "user-name",
                "type": "text",
                "value": "public"
              }
            ],
            "url": {
              "raw": "{{host}}/api/assets-gateway/assets/{{abb#permissions#assetId}}/access",
              "host": [
                "{{host}}"
              ],
              "path": [
                "api",
                "assets-gateway",
                "assets",
                "{{abb#permissions#assetId}}",
                "access"
              ]
            }
          },
          "response": []
        },
        {
          "name": "get flux project content",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 401\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "description": "bearer token",
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{token}}"
              },
              {
                "description": "Used only in full-local conf.",
                "key": "user-name",
                "type": "text",
                "value": "public"
              }
            ],
            "url": {
              "raw": "{{host}}/api/assets-gateway/raw/flux-project/{{abb#permissions#fluxProjectId}}",
              "host": [
                "{{host}}"
              ],
              "path": [
                "api",
                "assets-gateway",
                "raw",
                "flux-project",
                "{{abb#permissions#fluxProjectId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "log as test_account",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "var response_json = pm.response.json();\r",
                  "var token = response_json.access_token;\r",
                  "pm.collectionVariables.set('token', token);\r",
                  "\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "name": "Content-Type",
                "type": "text",
                "value": "application/x-www-form-urlencoded"
              }
            ],
            "body": {
              "mode": "urlencoded",
              "urlencoded": [
                {
                  "key": "username",
                  "value": "{{defaultUser}}",
                  "type": "text"
                },
                {
                  "key": "password",
                  "value": "{{password}}",
                  "type": "text"
                },
                {
                  "key": "client_id",
                  "value": "{{clientId}}",
                  "type": "text"
                },
                {
                  "key": "grant_type",
                  "value": "password",
                  "type": "text"
                },
                {
                  "key": "client_secret",
                  "value": "{{clientSecret}}",
                  "type": "text"
                }
              ]
            },
            "url": {
              "raw": "{{auth-url}}",
              "host": [
                "{{auth-url}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "set open access to /youwol-users",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "user-name",
                "value": "test",
                "description": "Used only in full-local conf.",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{token}}",
                "description": "bearer token",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"read\": \"authorized\",\n    \"share\": \"authorized\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/api/assets-gateway/assets/{{abb#permissions#assetId}}/access/{{abb#public_group}}",
              "host": [
                "{{host}}"
              ],
              "path": [
                "api",
                "assets-gateway",
                "assets",
                "{{abb#permissions#assetId}}",
                "access",
                "{{abb#public_group}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "access-info",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"access info for owner with borrowed in /youwol-users\", function () {",
                  "    ",
                  "    let respJson= pm.response.json()",
                  "    pm.expect(respJson).to.have.property(\"owningGroup\");",
                  "    pm.expect(respJson.owningGroup.name).to.eq(\"/youwol-users/postman-tester\");",
                  "",
                  "    pm.expect(respJson).to.have.property(\"ownerInfo\");",
                  "    pm.expect(respJson.ownerInfo.exposingGroups.length).to.eq(1);",
                  "    pm.expect(respJson.ownerInfo.exposingGroups[0].name).to.eq(\"/youwol-users\");",
                  "    pm.expect(respJson.ownerInfo.exposingGroups[0].access.read).to.eq(\"authorized\");",
                  "    pm.expect(respJson.ownerInfo.exposingGroups[0].access.share).to.eq(\"authorized\");",
                  "",
                  "    pm.expect(respJson.ownerInfo.defaultAccess.read).to.eq(\"forbidden\");",
                  "    pm.expect(respJson.ownerInfo.defaultAccess.share).to.eq(\"forbidden\");",
                  "",
                  "    pm.expect(respJson.consumerInfo.permissions.read).to.eq(true);",
                  "    pm.expect(respJson.consumerInfo.permissions.write).to.eq(true);",
                  "    pm.expect(respJson.consumerInfo.permissions.share).to.eq(true);",
                  "    pm.expect(respJson.consumerInfo.permissions.expiration).to.eq(null);",
                  "})",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "description": "bearer token",
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{token}}"
              },
              {
                "description": "Used only in full-local conf.",
                "key": "user-name",
                "type": "text",
                "value": "test"
              }
            ],
            "url": {
              "raw": "{{host}}/api/assets-gateway/assets/{{abb#permissions#assetId}}/access",
              "host": [
                "{{host}}"
              ],
              "path": [
                "api",
                "assets-gateway",
                "assets",
                "{{abb#permissions#assetId}}",
                "access"
              ]
            }
          },
          "response": []
        },
        {
          "name": "log as anonymous",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "var response_json = pm.response.json();\r",
                  "var token = response_json.access_token;\r",
                  "pm.collectionVariables.set('token', token);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "name": "Content-Type",
                "type": "text",
                "value": "application/x-www-form-urlencoded"
              },
              {
                "key": "",
                "type": "text",
                "value": ""
              }
            ],
            "body": {
              "mode": "urlencoded",
              "urlencoded": [
                {
                  "key": "client_id",
                  "value": "{{clientId}}",
                  "type": "text"
                },
                {
                  "key": "grant_type",
                  "value": "client_credentials",
                  "type": "text"
                },
                {
                  "key": "client_secret",
                  "value": "{{clientSecret}}",
                  "type": "text"
                }
              ]
            },
            "url": {
              "raw": "{{auth-url}}",
              "host": [
                "{{auth-url}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "access-info => read access",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"access info for owner with borrowed in /youwol-users\", function () {",
                  "    ",
                  "    let respJson= pm.response.json()",
                  "    pm.expect(respJson).to.have.property(\"owningGroup\");",
                  "    pm.expect(respJson.owningGroup.name).to.eq(\"/youwol-users/postman-tester\");",
                  "",
                  "    pm.expect(respJson.ownerInfo).to.eq(null);",
                  "    pm.expect(respJson.consumerInfo.permissions.read).to.eq(true);",
                  "    pm.expect(respJson.consumerInfo.permissions.write).to.eq(false);",
                  "    pm.expect(respJson.consumerInfo.permissions.share).to.eq(true);",
                  "    pm.expect(respJson.consumerInfo.permissions.expiration).to.eq(null);",
                  "})",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "description": "bearer token",
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{token}}"
              },
              {
                "description": "Used only in full-local conf.",
                "key": "user-name",
                "type": "text",
                "value": "public"
              }
            ],
            "url": {
              "raw": "{{host}}/api/assets-gateway/assets/{{abb#permissions#assetId}}/access",
              "host": [
                "{{host}}"
              ],
              "path": [
                "api",
                "assets-gateway",
                "assets",
                "{{abb#permissions#assetId}}",
                "access"
              ]
            }
          },
          "response": []
        },
        {
          "name": "get flux project content",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"empty flux project\", function () {",
                  "    ",
                  "    let respJson= pm.response.json()",
                  "    pm.expect(respJson).to.have.property('name');",
                  "    pm.expect(respJson).to.have.property('requirements');",
                  "    pm.expect(respJson).to.have.property('workflow');",
                  "    pm.expect(respJson).to.have.property('builderRendering');",
                  "    pm.expect(respJson).to.have.property('runnerRendering');",
                  "    pm.expect(respJson.name).to.eq(pm.collectionVariables.get(\"abb#flux#new_project#fluxName\"));",
                  "})",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "description": "bearer token",
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{token}}"
              },
              {
                "description": "Used only in full-local conf.",
                "key": "user-name",
                "type": "text",
                "value": "public"
              }
            ],
            "url": {
              "raw": "{{host}}/api/assets-gateway/raw/flux-project/{{abb#permissions#fluxProjectId}}",
              "host": [
                "{{host}}"
              ],
              "path": [
                "api",
                "assets-gateway",
                "raw",
                "flux-project",
                "{{abb#permissions#fluxProjectId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "sharing authorized",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"flux project located in expected drive/folder and of type 'flux-project'\", function () {",
                  "    ",
                  "    let respJson= pm.response.json()",
                  "    pm.expect(respJson).to.have.property('assetId');",
                  "    pm.expect(respJson).to.have.property('rawId');",
                  "    pm.expect(respJson).to.have.property('kind');",
                  "    pm.expect(respJson).to.have.property('groupId');",
                  "    pm.expect(respJson.kind).to.eq('flux-project')",
                  "    pm.expect(respJson.borrowed).to.eq(true)",
                  "    pm.expect(respJson.rawId).to.eq(pm.collectionVariables.get(\"abb#permissions#fluxProjectId\"))",
                  "    pm.expect(respJson.assetId).to.eq(pm.collectionVariables.get(\"abb#permissions#assetId\"))",
                  "    pm.collectionVariables.set('abb#permissions#borrowedTreeId2', respJson.treeId)",
                  "",
                  "    ",
                  "})",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "description": "bearer token",
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{token}}"
              },
              {
                "description": "Used only in full-local conf.",
                "key": "user-name",
                "type": "text",
                "value": "test"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"destinationFolderId\": \"{{abb#permissions#borrowingDriveId}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/api/assets-gateway/tree/{{abb#permissions#borrowedTreeId}}/borrow",
              "host": [
                "{{host}}"
              ],
              "path": [
                "api",
                "assets-gateway",
                "tree",
                "{{abb#permissions#borrowedTreeId}}",
                "borrow"
              ]
            }
          },
          "response": []
        },
        {
          "name": "log as test_account",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "var response_json = pm.response.json();\r",
                  "var token = response_json.access_token;\r",
                  "pm.collectionVariables.set('token', token);\r",
                  "\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "name": "Content-Type",
                "type": "text",
                "value": "application/x-www-form-urlencoded"
              }
            ],
            "body": {
              "mode": "urlencoded",
              "urlencoded": [
                {
                  "key": "username",
                  "value": "{{defaultUser}}",
                  "type": "text"
                },
                {
                  "key": "password",
                  "value": "{{password}}",
                  "type": "text"
                },
                {
                  "key": "client_id",
                  "value": "{{clientId}}",
                  "type": "text"
                },
                {
                  "key": "grant_type",
                  "value": "password",
                  "type": "text"
                },
                {
                  "key": "client_secret",
                  "value": "{{clientSecret}}",
                  "type": "text"
                }
              ]
            },
            "url": {
              "raw": "{{auth-url}}",
              "host": [
                "{{auth-url}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "set deadline access to /youwol-users, no sharing",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"access: read => deadine, sharing=>forbidden \", function () {\r",
                  "    \r",
                  "    let respJson= pm.response.json()\r",
                  "    pm.expect(respJson).to.have.property(\"access\");\r",
                  "\r",
                  "    pm.expect(respJson.access.read).to.eq(\"expiration-date\");\r",
                  "    pm.expect(respJson.access.share).to.eq(\"forbidden\");\r",
                  "})\r",
                  "\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "user-name",
                "value": "test",
                "description": "Used only in full-local conf.",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{token}}",
                "description": "bearer token",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"read\": \"expiration-date\",\n    \"parameters\":{\n        \"period\":10\n    },\n    \"share\": \"forbidden\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/api/assets-gateway/assets/{{abb#permissions#assetId}}/access/{{abb#public_group}}",
              "host": [
                "{{host}}"
              ],
              "path": [
                "api",
                "assets-gateway",
                "assets",
                "{{abb#permissions#assetId}}",
                "access",
                "{{abb#public_group}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "access-info",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"access info for owner with borrowed in /youwol-users\", function () {",
                  "    ",
                  "    let respJson= pm.response.json()",
                  "    pm.expect(respJson).to.have.property(\"owningGroup\");",
                  "    pm.expect(respJson.owningGroup.name).to.eq(\"/youwol-users/postman-tester\");",
                  "",
                  "    pm.expect(respJson).to.have.property(\"ownerInfo\");",
                  "    pm.expect(respJson.ownerInfo.exposingGroups.length).to.eq(1);",
                  "    pm.expect(respJson.ownerInfo.exposingGroups[0].name).to.eq(\"/youwol-users\");",
                  "    pm.expect(respJson.ownerInfo.exposingGroups[0].access.read).to.eq(\"expiration-date\");",
                  "    pm.expect(respJson.ownerInfo.exposingGroups[0].access.share).to.eq(\"forbidden\");",
                  "",
                  "    pm.expect(respJson.consumerInfo.permissions.read).to.eq(true);",
                  "    pm.expect(respJson.consumerInfo.permissions.write).to.eq(true);",
                  "    pm.expect(respJson.consumerInfo.permissions.expiration).to.eq(null);",
                  "})",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "description": "bearer token",
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{token}}"
              },
              {
                "description": "Used only in full-local conf.",
                "key": "user-name",
                "type": "text",
                "value": "test"
              }
            ],
            "url": {
              "raw": "{{host}}/api/assets-gateway/assets/{{abb#permissions#assetId}}/access",
              "host": [
                "{{host}}"
              ],
              "path": [
                "api",
                "assets-gateway",
                "assets",
                "{{abb#permissions#assetId}}",
                "access"
              ]
            }
          },
          "response": []
        },
        {
          "name": "log as anonymous",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "var response_json = pm.response.json();\r",
                  "var token = response_json.access_token;\r",
                  "pm.collectionVariables.set('token', token);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "name": "Content-Type",
                "type": "text",
                "value": "application/x-www-form-urlencoded"
              },
              {
                "key": "",
                "type": "text",
                "value": ""
              }
            ],
            "body": {
              "mode": "urlencoded",
              "urlencoded": [
                {
                  "key": "client_id",
                  "value": "{{clientId}}",
                  "type": "text"
                },
                {
                  "key": "grant_type",
                  "value": "client_credentials",
                  "type": "text"
                },
                {
                  "key": "client_secret",
                  "value": "{{clientSecret}}",
                  "type": "text"
                }
              ]
            },
            "url": {
              "raw": "{{auth-url}}",
              "host": [
                "{{auth-url}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "access-info => read access",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"access info for owner with borrowed in /youwol-users\", function () {",
                  "    ",
                  "    let respJson= pm.response.json()",
                  "    pm.expect(respJson).to.have.property(\"owningGroup\");",
                  "    pm.expect(respJson.owningGroup.name).to.eq(\"/youwol-users/postman-tester\");",
                  "",
                  "    pm.expect(respJson.ownerInfo).to.eq(null);",
                  "    pm.expect(respJson.consumerInfo.permissions.read).to.eq(true);",
                  "    pm.expect(respJson.consumerInfo.permissions.write).to.eq(false);",
                  "    pm.expect(respJson.consumerInfo.permissions.expiration).to.above(0);",
                  "})",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "description": "bearer token",
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{token}}"
              },
              {
                "description": "Used only in full-local conf.",
                "key": "user-name",
                "type": "text",
                "value": "public"
              }
            ],
            "url": {
              "raw": "{{host}}/api/assets-gateway/assets/{{abb#permissions#assetId}}/access",
              "host": [
                "{{host}}"
              ],
              "path": [
                "api",
                "assets-gateway",
                "assets",
                "{{abb#permissions#assetId}}",
                "access"
              ]
            }
          },
          "response": []
        },
        {
          "name": "get flux project content",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"empty flux project\", function () {",
                  "",
                  "    let respJson = pm.response.json()",
                  "    pm.expect(respJson).to.have.property('name');",
                  "    pm.expect(respJson).to.have.property('requirements');",
                  "    pm.expect(respJson).to.have.property('workflow');",
                  "    pm.expect(respJson).to.have.property('builderRendering');",
                  "    pm.expect(respJson).to.have.property('runnerRendering');",
                  "    pm.expect(respJson.name).to.eq(pm.collectionVariables.get(\"abb#flux#new_project#fluxName\"));",
                  "",
                  "    console.log(\"azazazaz\", pm.response.headers.get('cache-control'))",
                  "    maxAge = parseInt(pm.response.headers.get('cache-control').split(\"max-age=\")[1])",
                  "    pm.expect(maxAge).to.below(11)",
                  "    pm.collectionVariables.set(\"abb#permissions#max-age\", maxAge)",
                  "})",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "description": "bearer token",
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{token}}"
              },
              {
                "description": "Used only in full-local conf.",
                "key": "user-name",
                "type": "text",
                "value": "public"
              }
            ],
            "url": {
              "raw": "{{host}}/api/assets-gateway/raw/flux-project/{{abb#permissions#fluxProjectId}}",
              "host": [
                "{{host}}"
              ],
              "path": [
                "api",
                "assets-gateway",
                "raw",
                "flux-project",
                "{{abb#permissions#fluxProjectId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "get flux project content & max age decreased",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"max age decreased\", function () {",
                  "    ",
                  "    maxAge = parseInt(pm.response.headers.get('cache-control').split(\"max-age=\")[1])",
                  "    pm.expect(maxAge).to.below(pm.collectionVariables.get(\"abb#permissions#max-age\"))",
                  "})",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "setTimeout( () => {}, 1100 )"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "description": "bearer token",
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{token}}"
              },
              {
                "description": "Used only in full-local conf.",
                "key": "user-name",
                "type": "text",
                "value": "public"
              }
            ],
            "url": {
              "raw": "{{host}}/api/assets-gateway/raw/flux-project/{{abb#permissions#fluxProjectId}}",
              "host": [
                "{{host}}"
              ],
              "path": [
                "api",
                "assets-gateway",
                "raw",
                "flux-project",
                "{{abb#permissions#fluxProjectId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "sharing forbidden",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 403\", function () {",
                  "    pm.response.to.have.status(403);",
                  "});",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "description": "bearer token",
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{token}}"
              },
              {
                "description": "Used only in full-local conf.",
                "key": "user-name",
                "type": "text",
                "value": "public"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"destinationFolderId\": \"{{abb#permissions#borrowingDriveId}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/api/assets-gateway/tree/{{abb#permissions#borrowedTreeId}}/borrow",
              "host": [
                "{{host}}"
              ],
              "path": [
                "api",
                "assets-gateway",
                "tree",
                "{{abb#permissions#borrowedTreeId}}",
                "borrow"
              ]
            }
          },
          "response": []
        },
        {
          "name": "access-info => read access",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"access info for owner with borrowed in /youwol-users\", function () {",
                  "    ",
                  "    let respJson= pm.response.json()",
                  "    pm.expect(respJson).to.have.property(\"owningGroup\");",
                  "    pm.expect(respJson.owningGroup.name).to.eq(\"/youwol-users/postman-tester\");",
                  "",
                  "    pm.expect(respJson.ownerInfo).to.eq(null);",
                  "    pm.expect(respJson.consumerInfo.permissions.read).to.eq(false);",
                  "    pm.expect(respJson.consumerInfo.permissions.write).to.eq(false);",
                  "    pm.expect(respJson.consumerInfo.permissions.expiration).to.below(0);",
                  "})",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "setTimeout( ()=> {},11000)"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "description": "bearer token",
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{token}}"
              },
              {
                "description": "Used only in full-local conf.",
                "key": "user-name",
                "type": "text",
                "value": "public"
              }
            ],
            "url": {
              "raw": "{{host}}/api/assets-gateway/assets/{{abb#permissions#assetId}}/access",
              "host": [
                "{{host}}"
              ],
              "path": [
                "api",
                "assets-gateway",
                "assets",
                "{{abb#permissions#assetId}}",
                "access"
              ]
            }
          },
          "response": []
        },
        {
          "name": "get flux project content => 401",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 401\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "description": "bearer token",
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{token}}"
              },
              {
                "description": "Used only in full-local conf.",
                "key": "user-name",
                "type": "text",
                "value": "public"
              }
            ],
            "url": {
              "raw": "{{host}}/api/assets-gateway/raw/flux-project/{{abb#permissions#fluxProjectId}}",
              "host": [
                "{{host}}"
              ],
              "path": [
                "api",
                "assets-gateway",
                "raw",
                "flux-project",
                "{{abb#permissions#fluxProjectId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "log as test_account",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "var response_json = pm.response.json();\r",
                  "var token = response_json.access_token;\r",
                  "pm.collectionVariables.set('token', token);\r",
                  "\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "name": "Content-Type",
                "type": "text",
                "value": "application/x-www-form-urlencoded"
              }
            ],
            "body": {
              "mode": "urlencoded",
              "urlencoded": [
                {
                  "key": "username",
                  "value": "{{defaultUser}}",
                  "type": "text"
                },
                {
                  "key": "password",
                  "value": "{{password}}",
                  "type": "text"
                },
                {
                  "key": "client_id",
                  "value": "{{clientId}}",
                  "type": "text"
                },
                {
                  "key": "grant_type",
                  "value": "password",
                  "type": "text"
                },
                {
                  "key": "client_secret",
                  "value": "{{clientSecret}}",
                  "type": "text"
                }
              ]
            },
            "url": {
              "raw": "{{auth-url}}",
              "host": [
                "{{auth-url}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "delete project",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "description": "bearer token",
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{token}}"
              },
              {
                "description": "Used only in full-local conf.",
                "key": "user-name",
                "type": "text",
                "value": "test"
              }
            ],
            "url": {
              "raw": "{{host}}/api/assets-gateway/tree/items/{{abb#permissions#treeId}}",
              "host": [
                "{{host}}"
              ],
              "path": [
                "api",
                "assets-gateway",
                "tree",
                "items",
                "{{abb#permissions#treeId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "delete link",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "description": "bearer token",
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{token}}"
              },
              {
                "description": "Used only in full-local conf.",
                "key": "user-name",
                "type": "text",
                "value": "test"
              }
            ],
            "url": {
              "raw": "{{host}}/api/assets-gateway/tree/items/{{abb#permissions#borrowedTreeId}}",
              "host": [
                "{{host}}"
              ],
              "path": [
                "api",
                "assets-gateway",
                "tree",
                "items",
                "{{abb#permissions#borrowedTreeId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "delete link2",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "description": "bearer token",
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{token}}"
              },
              {
                "description": "Used only in full-local conf.",
                "key": "user-name",
                "type": "text",
                "value": "test"
              }
            ],
            "url": {
              "raw": "{{host}}/api/assets-gateway/tree/items/{{abb#permissions#borrowedTreeId2}}",
              "host": [
                "{{host}}"
              ],
              "path": [
                "api",
                "assets-gateway",
                "tree",
                "items",
                "{{abb#permissions#borrowedTreeId2}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "purge drive",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"1 folders deleted, 1 items deleted\", function () {",
                  "    ",
                  "    let respJson= pm.response.json()",
                  "    pm.expect(respJson).to.have.property('foldersCount');",
                  "    pm.expect(respJson).to.have.property('itemsCount');",
                  "    pm.expect(respJson.foldersCount).to.equal(0)",
                  "    pm.expect(respJson.itemsCount).to.equal(1)",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "description": "bearer token",
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{token}}"
              },
              {
                "description": "Used only in full-local conf.",
                "key": "user-name",
                "type": "text",
                "value": "test"
              }
            ],
            "url": {
              "raw": "{{host}}/api/assets-gateway/tree/drives/{{abb#permissions#driveId}}/purge",
              "host": [
                "{{host}}"
              ],
              "path": [
                "api",
                "assets-gateway",
                "tree",
                "drives",
                "{{abb#permissions#driveId}}",
                "purge"
              ]
            }
          },
          "response": []
        },
        {
          "name": "purge borrowing drive",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"1 folders deleted, 1 items deleted\", function () {",
                  "    ",
                  "    let respJson= pm.response.json()",
                  "    pm.expect(respJson).to.have.property('foldersCount');",
                  "    pm.expect(respJson).to.have.property('itemsCount');",
                  "    pm.expect(respJson.foldersCount).to.equal(0)",
                  "    pm.expect(respJson.itemsCount).to.equal(2)",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "description": "bearer token",
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{token}}"
              },
              {
                "description": "Used only in full-local conf.",
                "key": "user-name",
                "type": "text",
                "value": "test"
              }
            ],
            "url": {
              "raw": "{{host}}/api/assets-gateway/tree/drives/{{abb#permissions#borrowingDriveId}}/purge",
              "host": [
                "{{host}}"
              ],
              "path": [
                "api",
                "assets-gateway",
                "tree",
                "drives",
                "{{abb#permissions#borrowingDriveId}}",
                "purge"
              ]
            }
          },
          "response": []
        },
        {
          "name": "delete drive",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "description": "bearer token",
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{token}}"
              },
              {
                "description": "Used only in full-local conf.",
                "key": "user-name",
                "type": "text",
                "value": "test"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"a\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/api/assets-gateway/tree/drives/{{abb#permissions#driveId}}",
              "host": [
                "{{host}}"
              ],
              "path": [
                "api",
                "assets-gateway",
                "tree",
                "drives",
                "{{abb#permissions#driveId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "delete borrowing drive",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "description": "bearer token",
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{token}}"
              },
              {
                "description": "Used only in full-local conf.",
                "key": "user-name",
                "type": "text",
                "value": "test"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"a\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{host}}/api/assets-gateway/tree/drives/{{abb#permissions#borrowingDriveId}}",
              "host": [
                "{{host}}"
              ],
              "path": [
                "api",
                "assets-gateway",
                "tree",
                "drives",
                "{{abb#permissions#borrowingDriveId}}"
              ]
            }
          },
          "response": []
        }
      ]
    }
  ],
  "variable": [
    {
      "key": "token",
      "value": "eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJHa2RyeWwwV29KUnRrOWpuMndReVhDRDVicWxsRkNmdUxmMTRGT041SUw0In0.eyJleHAiOjE2MjA4OTI0NjgsImlhdCI6MTYyMDgwNjA2OCwianRpIjoiNWE1NzMzOWMtMDIyOS00OWE2LWFjMzAtMGFhNGIzYjMzMzhkIiwiaXNzIjoiaHR0cHM6Ly9hdXRoLnlvdXdvbC5jb20vYXV0aC9yZWFsbXMveW91d29sIiwic3ViIjoiOGIzZjBiYmItNTZjZC00ZWIwLThiMzMtMzEzODlhNmI3ZWZhIiwidHlwIjoiQmVhcmVyIiwiYXpwIjoieW91d29sLWRldiIsInNlc3Npb25fc3RhdGUiOiJjMjZiOWFmMy02NzhmLTQ2NjktODg1OC1lYzA3M2FlNWJiM2UiLCJhY3IiOiIxIiwic2NvcGUiOiJwcm9maWxlIGVtYWlsIHlvdXdvbF9kZXYgeW91d29sX3VzZXIiLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwibmFtZSI6IlRlc3QgRGV2IiwibWVtYmVyb2YiOlsiL3lvdXdvbC11c2Vycy9wb3N0bWFuLXRlc3Rlci9zdWJjaGlsZHRlc3QxIiwiL3lvdXdvbC11c2Vycy9wb3N0bWFuLXRlc3Rlci9zdWJjaGlsZHRlc3QyIiwiL3lvdXdvbC11c2Vycy95b3V3b2wtZGV2cyJdLCJwcmVmZXJyZWRfdXNlcm5hbWUiOiJ0ZXN0X2FjY291bnRfZGV2QHlvdXdvbC5jb20iLCJnaXZlbl9uYW1lIjoiVGVzdCIsImZhbWlseV9uYW1lIjoiRGV2IiwiZW1haWwiOiJ0ZXN0X2FjY291bnRfZGV2QHlvdXdvbC5jb20ifQ.OgzWGm82k0jm2eWKTJJJ6Q0VemFKHTwXAQoncZvY1zAWo1zpZCWIOT7xqm5s2QgudDmIvkc83KvkMzRL9M4IO969JPG_Wazd5rATiNiME-OCYTZZbb5pcwBqQvvv5NNaxKEScA2tRme4vzIi-KIMRGXvhdMGk6gOAlD_GTxv0z_yHE9IJFPQEo3rkeM11j4gwpZJZAxi1SorbZFsj5N43ltjXG4SSGykMQI7Aak2fuIkfcdBAgT9K_sOpWMgRf0gHiu0PWy_Q4zKeHqdVosXKDJ1D-iWg2mo-haGHnHkc_G1dK98tpYOAnCBQ5BGqs4XcIRJVJq-k2TU-mxIb3mgZg"
    },
    {
      "key": "abb#youwol-devs-group",
      "value": "L3lvdXdvbC11c2Vycy95b3V3b2wtZGV2cw=="
    },
    {
      "key": "abb#youwol-group",
      "value": "L3lvdXdvbC11c2Vycw=="
    },
    {
      "key": "abb#postman_child_group",
      "value": "L3lvdXdvbC11c2Vycy9wb3N0bWFuLXRlc3Rlci9zdWJjaGlsZHRlc3Qx"
    },
    {
      "key": "abb#postman_group",
      "value": "L3lvdXdvbC11c2Vycy9wb3N0bWFuLXRlc3Rlcg=="
    },
    {
      "key": "abb#public_group",
      "value": "L3lvdXdvbC11c2Vycw=="
    },
    {
      "key": "abb#driveId",
      "value": "51277a5a-a080-47d9-a63d-226a977f20e1"
    },
    {
      "key": "abb#folderId",
      "value": "b6c96f46-0314-4775-a568-d36d8eed7fcc"
    },
    {
      "key": "abb#flux#new_project#driveId",
      "value": "92083f9f-abe5-444b-8599-1b22e235068f"
    },
    {
      "key": "abb#flux#new_project#folderId",
      "value": "70bd633e-1394-4a86-ab76-dd54a8869bb5"
    },
    {
      "key": "abb#flux#new_project#AssetId",
      "value": "MDZmZDMwYjAtZGE4NC00ZjZhLThmMGItMzFiZTk2OGFjOWZm"
    },
    {
      "key": "abb#flux#new_project#fluxName",
      "value": "new flux-project"
    },
    {
      "key": "abb#flux#new_project#fluxProjectId",
      "value": "06fd30b0-da84-4f6a-8f0b-31be968ac9ff"
    },
    {
      "key": "abb#flux#from_dandling#driveId",
      "value": "c5a3b624-22d8-43fb-acf6-247a3a5d3a0f"
    },
    {
      "key": "abb#flux#from_dandling#folderId",
      "value": "2454eda7-2eaa-4e4c-a185-2f847a00f127"
    },
    {
      "key": "abb#flux#from_dandling#projectId",
      "value": "cfd61870-a114-45e1-b59f-b84d1bee3fb9"
    },
    {
      "key": "abb#flux#from_dandling#assetId",
      "value": "Y2ZkNjE4NzAtYTExNC00NWUxLWI1OWYtYjg0ZDFiZWUzZmI5"
    },
    {
      "key": "abb#flux#updates#driveId",
      "value": "c4d81595-13e0-4e50-8af5-0dc0dd8734b4"
    },
    {
      "key": "abb#flux#updates#folderId",
      "value": "8b930015-cd3b-42c0-b083-ff8635f66c6c"
    },
    {
      "key": "abb#flux#updates#assetId",
      "value": "ZDM1YjA0Y2UtNDQ3Mi00OWNlLWI1NDgtYzliMTZlY2ZiOWI3"
    },
    {
      "key": "abb#flux#updates#fluxName",
      "value": "new flux-project"
    },
    {
      "key": "abb#flux#updates#fluxProjectId",
      "value": "d35b04ce-4472-49ce-b548-c9b16ecfb9b7"
    },
    {
      "key": "abb#exposed-group#driveId",
      "value": "f7696bf7-e90d-4610-ab9b-92df50723a8a"
    },
    {
      "key": "abb#exposed-group#folderId",
      "value": "764f3780-64fd-4572-9aa6-20990b14f30e"
    },
    {
      "key": "abb#data#text-file#driveId",
      "value": "be4f9600-2145-405f-bbac-f4c79e8e9101"
    },
    {
      "key": "abb#data#text-file#folderId",
      "value": "3b37339d-11f2-42ba-a15c-5a1bcfc952bc"
    },
    {
      "key": "abb#data#text-file#relatedId",
      "value": "02e9b50b-65d2-46d2-978a-222cd18afb45"
    },
    {
      "key": "abb#data#image-file#driveId",
      "value": "c7669c7f-1c1c-459b-a7f9-f0e67b92b200"
    },
    {
      "key": "abb#data#image-file#folderId",
      "value": "dea009e8-c81f-480d-bd05-958d464529aa"
    },
    {
      "key": "abb#data#image-file#assetId",
      "value": "YjQ2YWVlNWMtMDFmZC00ZmQyLWExODctYWQ4OTY0ZGM2Yzg4"
    },
    {
      "key": "abb#data#image-file#relatedId",
      "value": "b46aee5c-01fd-4fd2-a187-ad8964dc6c88"
    },
    {
      "key": "abb#data#image-file#thumbnails-url",
      "value": "/api/assets-backend/assets/YjQ2YWVlNWMtMDFmZC00ZmQyLWExODctYWQ4OTY0ZGM2Yzg4/thumbnails/logo_YouWol_2020.png"
    },
    {
      "key": "abb#data#image-file#preview-url",
      "value": "/api/assets-gateway/raw/data/b46aee5c-01fd-4fd2-a187-ad8964dc6c88"
    },
    {
      "key": "abb#flux-pack#import#relatedId",
      "value": "QHBvc3RtYW4tZ2F0ZXdheS9mbHV4LWRhdGFmcmFtZQ=="
    },
    {
      "key": "abb#flux-pack#import#driveId",
      "value": "16666524-e001-47f7-9cb2-c0d6eddfe835"
    },
    {
      "key": "abb#flux-pack#import#folderId",
      "value": "fea044c4-0588-44d8-8e22-a5b475e41dad"
    },
    {
      "key": "abb#flux-pack#import#assetId",
      "value": "UUhCdmMzUnRZVzR0WjJGMFpYZGhlUzltYkhWNExXUmhkR0ZtY21GdFpRPT0="
    },
    {
      "key": "abb#assets#driveId",
      "value": "4a03b6d8-c056-4156-adb7-8d32862f8458"
    },
    {
      "key": "abb#assets#folderId",
      "value": "2aaacbf7-708e-487e-9548-42ca950d463c"
    },
    {
      "key": "abb#assets#assetId",
      "value": "cHJpdmF0ZQ=="
    },
    {
      "key": "abb#assets#treeId",
      "value": "cHJpdmF0ZQ=="
    },
    {
      "key": "abb#move#flux-project#driveId",
      "value": "1e07064a-808d-458a-9b94-c7051e7d101e"
    },
    {
      "key": "abb#move#flux-project#folderId",
      "value": "b9d0de30-fbd4-4579-8b75-59661320db85"
    },
    {
      "key": "abb#move#flux-project#rawId",
      "value": "1050853e-02c9-4706-9786-67a803bc1514"
    },
    {
      "key": "abb#move#flux-project#treeId",
      "value": "MTA1MDg1M2UtMDJjOS00NzA2LTk3ODYtNjdhODAzYmMxNTE0"
    },
    {
      "key": "abb#move#flux-project#driveDestId",
      "value": "106bc1b6-b54f-495f-8213-3641db92e09b"
    },
    {
      "key": "abb#move#flux-project#folderDestId",
      "value": "6cb178bc-bbc2-4859-944c-1e665cccc1e2"
    },
    {
      "key": "abb#move#data#driveId",
      "value": "ec626a46-70b9-44e5-8c3f-1cacb365556c"
    },
    {
      "key": "abb#move#data#folderId",
      "value": "1b62055c-dec4-4bad-afb8-b946d36fcd11"
    },
    {
      "key": "abb#move#data#rawId",
      "value": "ba8387e0-0cbe-4a13-a807-6ce5438ef5e4"
    },
    {
      "key": "abb#move#data#treeId",
      "value": "YmE4Mzg3ZTAtMGNiZS00YTEzLWE4MDctNmNlNTQzOGVmNWU0"
    },
    {
      "key": "abb#move#data#driveDestId",
      "value": "da694d35-3773-4262-9f02-370a0151b46b"
    },
    {
      "key": "abb#move#data#folderDestId",
      "value": "1a95aaa0-929f-4ab7-8e4e-e00be153986c"
    },
    {
      "key": "abb#permissions#driveId",
      "value": "45b876ab-65bd-409a-a97c-36bd1fc00178"
    },
    {
      "key": "abb#permissions#borrowingDriveId",
      "value": "b3ed3d00-ddc5-445c-a7b2-d19e7240fbcc"
    },
    {
      "key": "abb#permissions#assetId",
      "value": "ZjM3ZWYzODYtYjY0OC00NTdlLWI3YTktOWE3MWY4NmEyMGFk"
    },
    {
      "key": "abb#permissions#fluxProjectId",
      "value": "f37ef386-b648-457e-b7a9-9a71f86a20ad"
    },
    {
      "key": "abb#permissions#treeId",
      "value": "ZjM3ZWYzODYtYjY0OC00NTdlLWI3YTktOWE3MWY4NmEyMGFk"
    },
    {
      "key": "abb#permissions#borrowedTreeId",
      "value": "5671be9f-4628-4543-9b06-232c43a7fca5"
    },
    {
      "key": "abb#permissions#borrowedTreeId2",
      "value": "8fb7fd94-a6ae-4547-bc56-624a3cce689c"
    },
    {
      "key": "abb#permissions#max-age",
      "value": 9
    }
  ]
}